/*******************************************************************************
* Copyright (C) 2020-2022 THALES ALENIA SPACE FRANCE.
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License 2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
******************************************************************************/

grammar org.eclipse.xsmp.Xsmpcat hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.eclipse.xsmp/xcatalogue"

Catalogue:
    metadatum=Metadatum
    'catalogue' name=ValidID?
    importSection=ImportSection?
    member+=Namespace*;

ImportSection:
    importDeclarations+=ImportDeclaration+;

ImportDeclaration:
    'import' (importedType=[LanguageType|QualifiedName]
    | 'namespace' importedNamespace=[Namespace|QualifiedName]);

Attribute:
    AttributeDeclaration (=>'(' value=Expression? ')')?;

fragment AttributeDeclaration returns Attribute hidden(ML_COMMENT, SL_COMMENT):
    '@' (type=[Type|QualifiedName] | WS);

Metadatum:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*;

Namespace returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    {Namespace.metadatum=current} 'namespace' name=ValidID?
    '{'
    member+=NamespaceMember*
    '}';

enum RangeKind:
    Inclusive='...' | MinInclusive='..<' | MaxInclusive='<..' | Exclusive='<.<';

fragment StructBody *:
    '{'
    member+=StructMember*
    '}';

fragment ClassBody *:
    '{'
    member+=ClassMember*
    '}';

fragment InterfaceBody *:
    '{'
    member+=InterfaceMember*
    '}';

fragment ComponentBody *:
    '{'
    member+=ComponentMember*
    '}';

NamespaceMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Namespace.metadatum=current} 'namespace' name=ValidID?
    '{'
    member+=NamespaceMember*
    '}'
    |
    {Structure.metadatum=current} modifiers+=VisibilityModifiers*
    'struct' name=ValidID?
    '{'
    member+=StructMember*
    '}'
    |
    {Class.metadatum=current} modifiers+=ClassModifiers*
    'class' name=ValidID? ('extends' base=[Type|QualifiedName])?
    '{'
    member+=ClassMember*
    '}'
    |
    {Exception.metadatum=current} modifiers+=ClassModifiers*
    'exception' name=ValidID? ('extends' base=[Type|QualifiedName])?
    '{'
    member+=ClassMember*
    '}'
    |
    {Interface.metadatum=current} modifiers+=VisibilityModifiers*
    'interface' name=ValidID? ('extends' base+=[Type|QualifiedName] (',' base+=[Type|QualifiedName])*)?
    '{'
    member+=InterfaceMember*
    '}'
    |
    {Model.metadatum=current} modifiers+=ClassModifiers*
    'model' name=ValidID? ('extends' base=[Type|QualifiedName])? ('implements' interface+=[Type|QualifiedName] (','
    interface+=[Type|QualifiedName])*)?
    '{'
    member+=ComponentMember*
    '}'
    |
    {Service.metadatum=current} modifiers+=ClassModifiers*
    'service' name=ValidID? ('extends' base=[Type|QualifiedName])? ('implements' interface+=[Type|QualifiedName] (','
    interface+=[Type|QualifiedName])*)?
    '{'
    member+=ComponentMember*
    '}'
    |
    {Array.metadatum=current} modifiers+=VisibilityModifiers*
    // using keywork is deprecated and will be removed in a future release
    (('array' | 'using') name=ValidID? '='
    (itemType=[Type|QualifiedName] | 'typename') '[') size=Expression? ']'
    |
    {ValueReference.metadatum=current} modifiers+=VisibilityModifiers*
    'using' name=ValidID? '=' (type=[Type|QualifiedName] '*' | 'typename')
    |
    {Integer.metadatum=current} modifiers+=VisibilityModifiers*
    'integer' (name=ValidID | 'default') ('extends' primitiveType=[Type|QualifiedName])? ('in' (minimum=Expression |
    '*') '...'
    (maximum=Expression | '*'))?
    |
    {Float.metadatum=current} modifiers+=VisibilityModifiers*
    'float' (name=ValidID | 'default') ('extends' primitiveType=[Type|QualifiedName])? ('in' (minimum=Expression | '*')
    range=RangeKind (maximum=Expression | '*'))?
    |
    {EventType.metadatum=current} modifiers+=VisibilityModifiers*
    'event' (name=ValidID | 'default') ('extends' eventArgs=[Type|QualifiedName])?
    |
    {String.metadatum=current} modifiers+=VisibilityModifiers*
    'string' (name=ValidID | 'default') ('[' length=Expression? ']')?
    |
    {PrimitiveType.metadatum=current} modifiers+=VisibilityModifiers*
    'primitive' (name=ValidID | 'default')
    |
    {NativeType.metadatum=current} modifiers+=VisibilityModifiers*
    'native' (name=ValidID | 'default')
    |
    {AttributeType.metadatum=current} modifiers+=VisibilityModifiers*
    'attribute' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default') ('=' default=Expression)?
    |
    {Enumeration.metadatum=current} modifiers+=VisibilityModifiers*
    'enum' name=ValidID?
    '{'
    (literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* (',')?)?
    '}'
    |
// This rule is deprecated and will be removed in a future release.
// use AttributeTypeDeclaration
// TODO to be removed
    {AttributeType.metadatum=current} modifiers+=VisibilityModifiers*
    'attribute' name=ValidID
    '{'
    type=[ValueType|QualifiedName] ValidID '?'? ('=' default=Expression)?
    '}');

fragment PropertyDeclaration *:
    modifiers+=PropertyModifiers*
    'property' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default')
    ('get' 'throws' getRaises+=[Type|QualifiedName] (',' getRaises+=[Type|QualifiedName])*)?
    ('set' 'throws' setRaises+=[Type|QualifiedName] (',' setRaises+=[Type|QualifiedName])*)?
    ('->' attachedField=[Field|QualifiedName])?;

fragment OperationDeclaration *:
    modifiers+=VisibilityModifiers*
    'def'
    (returnParameter=ReturnParameter | 'void')
    (name=ValidID | 'default')
    '(' (parameter+=Parameter (',' parameter+=Parameter)*)? ')'
    ('throws' raisedException+=[Type|QualifiedName] (',' raisedException+=[Type|QualifiedName])*)?;

InterfaceMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration);

fragment ConstantDeclaration *:
    modifiers+=VisibilityModifiers*
    'constant' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default') ('=' value=Expression)?;

fragment FieldDeclaration *:
    modifiers+=FieldModifiers*
    'field' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default') ('=' default=Expression)?;

StructMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Field.metadatum=current} FieldDeclaration);

fragment AssociationDeclaration *:
    modifiers+=VisibilityModifiers*
    'association' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default') ('=' default=Expression)?;

ClassMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Field.metadatum=current} FieldDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration
    |
    {Association.metadatum=current} AssociationDeclaration);

fragment ContainerDeclaration *:
    'container' (type=[Type|QualifiedName] | 'typename') MultiplicityDeclaration (name=ValidID | 'default') ('='
    defaultComponent=[Type|QualifiedName])?;

fragment ReferenceDeclaration *:
    'reference' (interface=[Type|QualifiedName] | 'typename') MultiplicityDeclaration (name=ValidID | 'default');

fragment EntryPointDeclaration *:
    'entrypoint' (name=ValidID | 'default')
    ('{'
    ('in' input+=[Field|QualifiedName] | 'out' output+=[Field|QualifiedName])*
    '}')?;

fragment EventSinkDeclaration *:
    'eventsink' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default');

fragment EventSourceDeclaration *:
    'eventsource' (type=[Type|QualifiedName] | 'typename') (name=ValidID | 'default');

ComponentMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Field.metadatum=current} FieldDeclaration
    |
    {Constant.metadatum=current} ConstantDeclaration
    |
    {Association.metadatum=current} AssociationDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Container.metadatum=current} ContainerDeclaration
    |
    {Reference.metadatum=current} ReferenceDeclaration
    |
    {EntryPoint.metadatum=current} EntryPointDeclaration
    |
    {EventSink.metadatum=current} EventSinkDeclaration
    |
    {EventSource.metadatum=current} EventSourceDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration);

fragment MultiplicityDeclaration *:
    optional?='?' | multiplicity=Multiplicity?;

Multiplicity:
    {Multiplicity}
    '[' ((lower=Expression ('...' (aux?='*' | upper=Expression))?) |
    aux?='+'
    | '*')? ']';

VisibilityModifiers:
    'private' | 'protected' | 'public';

ClassModifiers:
    VisibilityModifiers | 'abstract';

PropertyModifiers:
    VisibilityModifiers | 'readWrite' | 'readOnly' | 'writeOnly';

FieldModifiers:
    VisibilityModifiers | 'input' | 'output' | 'transient';

EnumerationLiteral:
    metadatum=Metadatum
    name=ValidID ('=' value=Expression)?;

ParameterMetadatum returns Metadatum:
    {Metadatum}
    // do not provide documentation at parameter level( see @param tag in operation)
    // documentation=ML_DOCUMENTATION?
    metadata+=Attribute*;

ReturnParameter returns Parameter:
    metadatum=ParameterMetadatum
    (type=[Type|QualifiedName] | 'typename') name=ValidID?;

Parameter:
    metadatum=ParameterMetadatum
    (=>direction=ParameterDirectionKind (type=[Type|QualifiedName] | 'typename') | (type=[Type|QualifiedName] | 'typename')) (name=ValidID | 'default'
    ) ('='
    default=Expression)?;

enum ParameterDirectionKind:
    in='in' | out='out' | inout='inout';

ValidID:
    ID | 'extends' | 'implements' | 'in' | 'out' | 'inout' | 'exception' | 'model' | 'service' | 'interface' | 'string'
    | 'native' | 'primitive' | 'attribute' | 'integer' | 'catalogue' | 'entrypoint' | 'field' | 'container' |
    'reference' | 'eventsink' | 'eventsource' | 'property' | 'association' | 'constant' | 'input' | 'output' |
    'transient' | 'event' | 'def' | 'abstract' | 'get' | 'set' | 'readWrite' | 'readOnly' | 'writeOnly' |
    'import' | 'array';

QualifiedName:
    ValidID (=>'.' ValidID)*;

Expression:
    OrExpression;

OrExpression returns Expression:
    AndExpression (=>({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
    '||';

AndExpression returns Expression:
    BitwiseOrExpression (=>({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=BitwiseOrExpression)*;

OpAnd:
    '&&';

BitwiseOrExpression returns Expression:
    BitwiseXorExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseOr)
    rightOperand=BitwiseXorExpression)*;

OpBitwiseOr:
    '|';

BitwiseXorExpression returns Expression:
    BitwiseAndExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseXor)
    rightOperand=BitwiseAndExpression)*;

OpBitwiseXor:
    '^';

BitwiseAndExpression returns Expression:
    EqualityExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
    rightOperand=EqualityExpression)*;

OpBitwiseAnd:
    '&';

EqualityExpression returns Expression:
    RelationalExpression (=>({BinaryOperation.leftOperand=current} feature=OpEquality)
    rightOperand=RelationalExpression)*;

OpEquality:
    '==' | '!=';

RelationalExpression returns Expression:
    BitwiseExpression
    (=>({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=BitwiseExpression)*;

OpCompare:
    '>=' | '<=' | '>' | '<';

BitwiseExpression returns Expression:
    AdditiveExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwise)
    rightOperand=AdditiveExpression)*;

OpBitwise:
    '<<' | '>>';

AdditiveExpression returns Expression:
    MultiplicativeExpression (=>({BinaryOperation.leftOperand=current} feature=OpAdd)
    rightOperand=MultiplicativeExpression)*;

OpAdd:
    '+' | '-';

MultiplicativeExpression returns Expression:
    UnaryOperation (=>({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;

OpMulti:
    '*' | '/' | '%';

UnaryOperation returns Expression:
    {UnaryOperation} feature=OpUnary operand=UnaryOperation | Literal;

OpUnary:
    "!" | "-" | "+" | "~";

EnumerationLiteralReference returns Expression:
    {EnumerationLiteralReference} value=[NamedElement|QualifiedName];

Literal returns Expression:
    CollectionLiteral | FloatingLiteral | IntegerLiteral | StringLiteral | CharacterLiteral | BooleanLiteral |
    ParenthesizedExpression |
    EnumerationLiteralReference | BuiltInConstant | BuiltInFunction | KeywordExpression;

ParenthesizedExpression returns Expression:
    {ParenthesizedExpression} '(' expr=Expression ')';

CollectionLiteral:
    {CollectionLiteral} '{' (elements+=Expression (',' elements+=Expression)* (',')?)? '}';

IntegerLiteral returns IntegerLiteral:
    {IntegerLiteral} text=INTEGER_LITERAL;

FloatingLiteral returns FloatingLiteral:
    {FloatingLiteral} text=FLOATING_LITERAL;

StringLiteral returns Expression:
    {StringLiteral} value=STRING_LITERAL;

CharacterLiteral returns Expression:
    {CharacterLiteral} value=CHARACTER_LITERAL;

BuiltInConstant returns Expression:
    {BuiltInConstant} '$' name=ValidID;

BuiltInFunction returns Expression:
    {BuiltInFunction} '$' name=ValidID '(' (parameter+=Expression (',' parameter+=Expression)*)? ')';

BooleanLiteral returns Expression:
    {BooleanLiteral} ('false' | isTrue?='true');

KeywordExpression returns Expression:
    {KeywordExpression} name=('nullptr' /*|'this'*/ );

terminal INTEGER_LITERAL:
    DECIMAL_LITERAL INTEGER_TIME_SUFFIX?
    | OCTAL_LITERAL INTEGER_TIME_SUFFIX?
    | HEXADECIMAL_LITERAL INTEGER_SUFFIX?
    | BINARY_LITERAL INTEGER_SUFFIX?;

terminal CHARACTER_LITERAL:
    ('u' | 'U' | 'L')? '\'' CCHAR+ '\'';

terminal FLOATING_LITERAL:
    FRACTIONALCONSTANT EXPONENTPART? FLOATINGSUFFIX?
    | DIGITSEQUENCE EXPONENTPART FLOATINGSUFFIX?;

terminal STRING_LITERAL:
    ENCODINGPREFIX?
    ('"' SCHAR* '"');

terminal fragment HEX_QUAD:
    HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT;

terminal fragment UNIVERSAL_CHARACTER_NAME:
    '\\u' HEX_QUAD
    | '\\U' HEX_QUAD HEX_QUAD;

terminal ID:
    /*
     *  ID_NONDIGIT | Identifier ID_NONDIGIT | Identifier DIGIT
     */
    ID_NONDIGIT (ID_NONDIGIT | DIGIT)*;

terminal fragment ID_NONDIGIT:
    NONDIGIT | UNIVERSAL_CHARACTER_NAME;

terminal fragment NONDIGIT:
    ('a'..'z') | ('A'..'Z') | ('_');

terminal fragment DIGIT:
    ('0'..'9');

terminal DECIMAL_LITERAL:
    NONZERODIGIT ('\''? DIGIT)*;

terminal OCTAL_LITERAL:
    '0' ('\''? OCTALDIGIT)*;

terminal HEXADECIMAL_LITERAL:
    ('0x' | '0X') HEXADECIMALDIGIT ('\''? HEXADECIMALDIGIT)*;

terminal BINARY_LITERAL:
    ('0b' | '0B') BINARYDIGIT ('\''? BINARYDIGIT)*;

terminal fragment NONZERODIGIT:
    ('1'..'9');

terminal fragment OCTALDIGIT:
    '0'..'7';

terminal fragment HEXADECIMALDIGIT:
    '0'..'9' | 'a'..'z' | 'A'..'Z';

terminal fragment BINARYDIGIT:
    '0' | '1';

terminal fragment INTEGER_SUFFIX:
    UNSIGNEDSUFFIX LONGSUFFIX?
    | LONGSUFFIX UNSIGNEDSUFFIX?;

terminal fragment INTEGER_TIME_SUFFIX:
    'ns' | 'us' | 'ms' | 's' | 'mn' | 'h' | 'd' | 'y' | INTEGER_SUFFIX;

terminal fragment UNSIGNEDSUFFIX:
    'u' | 'U';

terminal fragment LONGSUFFIX:
    'l' | 'L' | 'll' | 'LL';

terminal fragment CCHAR:
    // ~ ['\\\r\n]
    !('\'' | '\r' | '\n')
    | ESCAPESEQUENCE
    | UNIVERSAL_CHARACTER_NAME;

terminal fragment ESCAPESEQUENCE:
    SIMPLEESCAPESEQUENCE
    | OCTALESCAPESEQUENCE
    | HEXADECIMALESCAPESEQUENCE;

terminal fragment SIMPLEESCAPESEQUENCE:
    '\\\''
    | '\\"'
    | '\\?'
    | '\\\\'
    | '\\a'
    | '\\b'
    | '\\f'
    | '\\n'
    | '\\r'
    | ('\\' ('\r' '\n'? | '\n'))
    | '\\t'
    | '\\v';

terminal fragment OCTALESCAPESEQUENCE:
    '\\' OCTALDIGIT
    | '\\' OCTALDIGIT OCTALDIGIT
    | '\\' OCTALDIGIT OCTALDIGIT OCTALDIGIT;

terminal fragment HEXADECIMALESCAPESEQUENCE:
    '\\x' HEXADECIMALDIGIT+;

terminal fragment FRACTIONALCONSTANT:
    DIGITSEQUENCE? '.' DIGITSEQUENCE
    | DIGITSEQUENCE '.';

terminal fragment EXPONENTPART:
    ('e' | 'E') SIGN? DIGITSEQUENCE;

terminal fragment SIGN:
    '+' | '-';

terminal fragment DIGITSEQUENCE:
    DIGIT ('\''? DIGIT)*;

terminal fragment FLOATINGSUFFIX:
    'f' | 'F' | 'l' | 'L';

terminal fragment ENCODINGPREFIX:
    'u8' | 'u' | 'U' | 'L';

terminal fragment SCHAR:
    // ~ ["\\\r\n]
    !('"' | '\\' | '\r' | '\n')
    | ESCAPESEQUENCE
    | UNIVERSAL_CHARACTER_NAME;

terminal WS:
    (' ' | '\t' | NEW_LINE)+;

terminal fragment NEW_LINE:
    ('\r' '\n'? | '\n');

terminal ML_DOCUMENTATION:
    '/**' !'*'->'*/';

terminal ML_COMMENT:
    ('/*' !'*' | '/***')->'*/';

terminal SL_COMMENT:
    '//' !('\n' | '\r')* ('\r'? '\n')?;
