/*******************************************************************************
* Copyright (C) 2020-2023 THALES ALENIA SPACE FRANCE.
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License 2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
******************************************************************************/

grammar org.eclipse.xsmp.Xsmpcat with org.eclipse.xsmp.Xsmpcore hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.eclipse.xsmp/xcatalogue"

Catalogue:
    metadatum=Metadatum
    'catalogue' name=ValidID?
    importSection=ImportSection?
    member+=Namespace*;

ImportSection:
    importDeclarations+=ImportDeclaration+;

ImportDeclaration:
    'import' (importedType=[LanguageType|QualifiedName]
    | 'namespace' importedNamespace=[Namespace|QualifiedName]);

enum RangeKind:
    Inclusive='...' | MinInclusive='..<' | MaxInclusive='<..' | Exclusive='<.<';

@Override
NamespaceMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Namespace.metadatum=current} 'namespace' name=ValidID?
    (member+=NestedNamespace | '{' member+=NamespaceMember* '}')
    |
    {Structure.metadatum=current} modifiers+=VisibilityModifiers*
    'struct' name=ValidID?
    '{'
    member+=StructMember*
    '}'
    |
    {Class.metadatum=current} modifiers+=ClassModifiers*
    'class' name=ValidID? ('extends' base=[Type|QualifiedName])?
    '{'
    member+=ClassMember*
    '}'
    |
    {Exception.metadatum=current} modifiers+=ClassModifiers*
    'exception' name=ValidID? ('extends' base=[Type|QualifiedName])?
    '{'
    member+=ClassMember*
    '}'
    |
    {Interface.metadatum=current} modifiers+=VisibilityModifiers*
    'interface' name=ValidID? ('extends' base+=[Type|QualifiedName] (',' base+=[Type|QualifiedName])*)?
    '{'
    member+=InterfaceMember*
    '}'
    |
    {Model.metadatum=current} modifiers+=ClassModifiers*
    'model' name=ValidID? ('extends' base=[Type|QualifiedName])? ('implements' interface+=[Type|QualifiedName] (','
    interface+=[Type|QualifiedName])*)?
    '{'
    member+=ComponentMember*
    '}'
    |
    {Service.metadatum=current} modifiers+=ClassModifiers*
    'service' name=ValidID? ('extends' base=[Type|QualifiedName])? ('implements' interface+=[Type|QualifiedName] (','
    interface+=[Type|QualifiedName])*)?
    '{'
    member+=ComponentMember*
    '}'
    |
    {Array.metadatum=current} modifiers+=VisibilityModifiers*
    // using keywork is deprecated and will be removed in a future release
    (('array' | 'using') name=ValidID? '='
    itemType=[Type|QualifiedName] '[') size=Expression? ']'
    |
    {ValueReference.metadatum=current} modifiers+=VisibilityModifiers*
    'using' name=ValidID? '=' type=[Type|QualifiedName] '*'
    |
    {Integer.metadatum=current} modifiers+=VisibilityModifiers*
    'integer' name=ValidID ('extends' primitiveType=[Type|QualifiedName])? ('in' (minimum=Expression |
    '*') '...'
    (maximum=Expression | '*'))?
    |
    {Float.metadatum=current} modifiers+=VisibilityModifiers*
    'float' name=ValidID ('extends' primitiveType=[Type|QualifiedName])? ('in' (minimum=Expression | '*')
    range=RangeKind (maximum=Expression | '*'))?
    |
    {EventType.metadatum=current} modifiers+=VisibilityModifiers*
    'event' name=ValidID ('extends' eventArgs=[Type|QualifiedName])?
    |
    {String.metadatum=current} modifiers+=VisibilityModifiers*
    'string' name=ValidID ('[' length=Expression? ']')?
    |
    {PrimitiveType.metadatum=current} modifiers+=VisibilityModifiers*
    'primitive' name=ValidID
    |
    {NativeType.metadatum=current} modifiers+=VisibilityModifiers*
    'native' name=ValidID
    |
    {AttributeType.metadatum=current} modifiers+=VisibilityModifiers*
    'attribute' type=[Type|QualifiedName] name=ValidID ('=' default=Expression)?
    |
    {Enumeration.metadatum=current} modifiers+=VisibilityModifiers*
    'enum' name=ValidID?
    '{'
    (literal+=EnumerationLiteral (',' literal+=EnumerationLiteral)* (',')?)?
    '}'
    |
// This rule is deprecated and will be removed in a future release.
// use AttributeTypeDeclaration
// TODO to be removed
    {AttributeType.metadatum=current} modifiers+=VisibilityModifiers*
    'attribute' name=ValidID
    '{'
    type=[ValueType|QualifiedName] ValidID '?'? ('=' default=Expression)?
    '}');

fragment PropertyDeclaration *:
    modifiers+=PropertyModifiers*
    'property' type=[Type|QualifiedName] name=ValidID
    ('get' 'throws' getRaises+=[Type|QualifiedName] (',' getRaises+=[Type|QualifiedName])*)?
    ('set' 'throws' setRaises+=[Type|QualifiedName] (',' setRaises+=[Type|QualifiedName])*)?
    ('->' attachedField=[Field|QualifiedName])?;

fragment OperationDeclaration *:
    modifiers+=VisibilityModifiers*
    'def'
    (returnParameter=ReturnParameter | 'void')
    name=ValidID
    '(' (parameter+=Parameter (',' parameter+=Parameter)*)? ')'
    ('throws' raisedException+=[Type|QualifiedName] (',' raisedException+=[Type|QualifiedName])*)?;

InterfaceMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration);

fragment ConstantDeclaration *:
    modifiers+=VisibilityModifiers*
    'constant' type=[Type|QualifiedName] name=ValidID ('=' value=Expression)?;

fragment FieldDeclaration *:
    modifiers+=FieldModifiers*
    'field' type=[Type|QualifiedName] name=ValidID ('=' default=Expression)?;

StructMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Field.metadatum=current} FieldDeclaration);

fragment AssociationDeclaration *:
    modifiers+=VisibilityModifiers*
    'association' type=[Type|QualifiedName] name=ValidID ('=' default=Expression)?;

ClassMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Constant.metadatum=current} ConstantDeclaration
    |
    {Field.metadatum=current} FieldDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration
    |
    {Association.metadatum=current} AssociationDeclaration);

fragment ContainerDeclaration *:
    'container' type=[Type|QualifiedName] MultiplicityDeclaration name=ValidID ('='
    defaultComponent=[Type|QualifiedName])?;

fragment ReferenceDeclaration *:
    'reference' interface=[Type|QualifiedName] MultiplicityDeclaration name=ValidID;

fragment EntryPointDeclaration *:
    'entrypoint' name=ValidID
    ('{'
    ('in' input+=[Field|QualifiedName] | 'out' output+=[Field|QualifiedName])*
    '}')?;

fragment EventSinkDeclaration *:
    'eventsink' type=[Type|QualifiedName] name=ValidID;

fragment EventSourceDeclaration *:
    'eventsource' type=[Type|QualifiedName] name=ValidID;

ComponentMember returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    ({Field.metadatum=current} FieldDeclaration
    |
    {Constant.metadatum=current} ConstantDeclaration
    |
    {Association.metadatum=current} AssociationDeclaration
    |
    {Property.metadatum=current} PropertyDeclaration
    |
    {Container.metadatum=current} ContainerDeclaration
    |
    {Reference.metadatum=current} ReferenceDeclaration
    |
    {EntryPoint.metadatum=current} EntryPointDeclaration
    |
    {EventSink.metadatum=current} EventSinkDeclaration
    |
    {EventSource.metadatum=current} EventSourceDeclaration
    |
    {Operation.metadatum=current} OperationDeclaration);

fragment MultiplicityDeclaration *:
    optional?='?' | multiplicity=Multiplicity?;

Multiplicity:
    {Multiplicity}
    '[' ((lower=Expression ('...' (aux?='*' | upper=Expression))?) |
    aux?='+'
    | '*')? ']';

VisibilityModifiers:
    'private' | 'protected' | 'public';

ClassModifiers:
    VisibilityModifiers | 'abstract';

PropertyModifiers:
    VisibilityModifiers | 'readWrite' | 'readOnly' | 'writeOnly';

FieldModifiers:
    VisibilityModifiers | 'input' | 'output' | 'transient';

EnumerationLiteral:
    metadatum=Metadatum
    name=ValidID ('=' value=Expression)?;

ParameterMetadatum returns Metadatum:
    {Metadatum}
    // do not provide documentation at parameter level( see @param tag in operation)
    // documentation=ML_DOCUMENTATION?
    metadata+=Attribute*;

ReturnParameter returns Parameter:
    metadatum=ParameterMetadatum
    type=[Type|QualifiedName] name=ValidID?;

Parameter:
    metadatum=ParameterMetadatum
    direction=ParameterDirectionKind? type=[Type|QualifiedName] name=ValidID ('='
    default=Expression)?;

enum ParameterDirectionKind:
    in='in' | out='out' | inout='inout';

@Override
ValidID:
    ID | 'extends' | 'implements' | 'in' | 'out' | 'inout' | 'exception' | 'model' | 'service' | 'interface' | 'string'
    | 'native' | 'primitive' | 'attribute' | 'integer' | 'catalogue' | 'entrypoint' | 'field' | 'container' |
    'reference' | 'eventsink' | 'eventsource' | 'property' | 'association' | 'constant' | 'input' | 'output' |
    'transient' | 'event' | 'def' | 'abstract' | 'get' | 'set' | 'readWrite' | 'readOnly' | 'writeOnly' |
    'import' | 'array';
