/*******************************************************************************
* Copyright (C) 2020-2023 THALES ALENIA SPACE FRANCE.
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License 2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
******************************************************************************/

grammar org.eclipse.xsmp.Xsmpcore hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.eclipse.xsmp/xsmp"

@Final
Namespace returns ecore::EObject:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*
    {Namespace.metadatum=current} 'namespace' name=ValidID
    (member+=NestedNamespace | '{' member+=NamespaceMember* '}');

@Final
NestedNamespace returns Namespace:
    {Namespace} '::' name=ValidID
    (member+=NestedNamespace | '{' member+=NamespaceMember* '}');

NamespaceMember returns ecore::EObject:
    Namespace;

Expression:
    OrExpression;

Attribute:
    AttributeDeclaration ('(' value=Expression? ')')?;

fragment AttributeDeclaration returns Attribute hidden(ML_COMMENT, SL_COMMENT):
    '@' (type=[Type|QualifiedName] | WS);

Metadatum:
    {Metadatum}
    documentation=ML_DOCUMENTATION?
    metadata+=Attribute*;

ValidID:
    ID;

QualifiedName:
    ValidID ('.' ValidID)*;

EmptyExpression returns Expression:
    {EmptyExpression};

OrExpression returns Expression:
    AndExpression (=>({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
    '||';

AndExpression returns Expression:
    BitwiseOrExpression (=>({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=BitwiseOrExpression)*;

OpAnd:
    '&&';

BitwiseOrExpression returns Expression:
    BitwiseXorExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseOr)
    rightOperand=BitwiseXorExpression)*;

OpBitwiseOr:
    '|';

BitwiseXorExpression returns Expression:
    BitwiseAndExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseXor)
    rightOperand=BitwiseAndExpression)*;

OpBitwiseXor:
    '^';

BitwiseAndExpression returns Expression:
    EqualityExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
    rightOperand=EqualityExpression)*;

OpBitwiseAnd:
    '&';

EqualityExpression returns Expression:
    RelationalExpression (=>({BinaryOperation.leftOperand=current} feature=OpEquality)
    rightOperand=RelationalExpression)*;

OpEquality:
    '==' | '!=';

RelationalExpression returns Expression:
    BitwiseExpression
    (=>({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=BitwiseExpression)*;

OpCompare:
    '>=' | '<=' | '>' | '<';

BitwiseExpression returns Expression:
    AdditiveExpression (=>({BinaryOperation.leftOperand=current} feature=OpBitwise)
    rightOperand=AdditiveExpression)*;

OpBitwise:
    '<<' | '>>';

AdditiveExpression returns Expression:
    MultiplicativeExpression (=>({BinaryOperation.leftOperand=current} feature=OpAdd)
    rightOperand=MultiplicativeExpression)*;

OpAdd:
    '+' | '-';

MultiplicativeExpression returns Expression:
    UnaryOperation (=>({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;

OpMulti:
    '*' | '/' | '%';

UnaryOperation returns Expression:
    {UnaryOperation} feature=OpUnary operand=UnaryOperation | Literal;

OpUnary:
    "!" | "-" | "+" | "~";

NamedElementReference returns Expression:
    {NamedElementReference} value=[NamedElement|QualifiedName];

Literal returns Expression:
    CollectionLiteral | FloatingLiteral | IntegerLiteral | StringLiteral | CharacterLiteral | BooleanLiteral |
    ParenthesizedExpression | NamedElementReference | BuiltInConstant | BuiltInFunction | KeywordExpression;

ParenthesizedExpression returns Expression:
    {ParenthesizedExpression} '(' expr=Expression ')';

DesignatedInitializer returns Expression:
    {DesignatedInitializer} '.' field=[Field|ValidID] ('=' expr=Expression)?;

CollectionExpression returns Expression:
    EmptyExpression | Expression | DesignatedInitializer;

CollectionLiteral returns Expression:
    {CollectionLiteral} '{' elements+=CollectionExpression (','
    elements+=CollectionExpression)*
    '}';

IntegerLiteral returns IntegerLiteral:
    {IntegerLiteral} text=INTEGER_LITERAL;

FloatingLiteral returns FloatingLiteral:
    {FloatingLiteral} text=FLOATING_LITERAL;

StringLiteral returns Expression:
    {StringLiteral} (value+=STRING_LITERAL)+;

CharacterLiteral returns Expression:
    {CharacterLiteral} value=CHARACTER_LITERAL;

BuiltInConstant returns Expression:
    {BuiltInConstant} '$' name=ValidID;

BuiltInFunction returns Expression:
    {BuiltInFunction} '$' name=ValidID '(' (parameter+=Expression (',' parameter+=Expression)*)? ')';

BooleanLiteral returns Expression:
    {BooleanLiteral} ('false' | isTrue?='true');

KeywordExpression returns Expression:
    {KeywordExpression} name=('nullptr' /*|'this'*/ );

terminal INTEGER_LITERAL:
    DECIMAL_LITERAL INTEGER_TIME_SUFFIX?
    | OCTAL_LITERAL INTEGER_TIME_SUFFIX?
    | HEXADECIMAL_LITERAL INTEGER_SUFFIX?
    | BINARY_LITERAL INTEGER_SUFFIX?;

terminal CHARACTER_LITERAL:
    /*('u' | 'U' | 'L')?*/ '\'' CCHAR+ '\'';

terminal FLOATING_LITERAL:
    FRACTIONALCONSTANT EXPONENTPART? FLOATINGSUFFIX?
    | DIGITSEQUENCE EXPONENTPART FLOATINGSUFFIX?;

terminal STRING_LITERAL:
    ENCODINGPREFIX?
    ('"' SCHAR* '"') // (WS* ENCODINGPREFIX? ('"' SCHAR* '"'))*
;

terminal fragment HEX_QUAD:
    HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT HEXADECIMALDIGIT;

terminal fragment UNIVERSAL_CHARACTER_NAME:
    '\\u' HEX_QUAD
    | '\\U' HEX_QUAD HEX_QUAD;

terminal ID:
    /*
     *  ID_NONDIGIT | Identifier ID_NONDIGIT | Identifier DIGIT
     */
    ID_NONDIGIT (ID_NONDIGIT | DIGIT)*;

terminal fragment ID_NONDIGIT:
    NONDIGIT | UNIVERSAL_CHARACTER_NAME;

terminal fragment NONDIGIT:
    ('a'..'z') | ('A'..'Z') | ('_');

terminal fragment DIGIT:
    ('0'..'9');

terminal DECIMAL_LITERAL:
    NONZERODIGIT ('\''? DIGIT)*;

terminal OCTAL_LITERAL:
    '0' ('\''? OCTALDIGIT)*;

terminal HEXADECIMAL_LITERAL:
    ('0x' | '0X') HEXADECIMALDIGIT ('\''? HEXADECIMALDIGIT)*;

terminal BINARY_LITERAL:
    ('0b' | '0B') BINARYDIGIT ('\''? BINARYDIGIT)*;

terminal fragment NONZERODIGIT:
    ('1'..'9');

terminal fragment OCTALDIGIT:
    '0'..'7';

terminal fragment HEXADECIMALDIGIT:
    '0'..'9' | 'a'..'z' | 'A'..'Z';

terminal fragment BINARYDIGIT:
    '0' | '1';

terminal fragment INTEGER_SUFFIX:
    UNSIGNEDSUFFIX LONGSUFFIX?
    | LONGSUFFIX UNSIGNEDSUFFIX?;

terminal fragment INTEGER_TIME_SUFFIX:
    'ns' | 'us' | 'ms' | 's' | 'mn' | 'h' | 'd' | 'y' | INTEGER_SUFFIX;

terminal fragment UNSIGNEDSUFFIX:
    'u' | 'U';

terminal fragment LONGSUFFIX:
    'l' | 'L' /* | 'll' | 'LL'*/ ;

terminal fragment CCHAR:
    // ~ ['\\\r\n]
    !('\'' | '\r' | '\n')
    | ESCAPESEQUENCE
    | UNIVERSAL_CHARACTER_NAME;

terminal fragment ESCAPESEQUENCE:
    SIMPLEESCAPESEQUENCE
    | OCTALESCAPESEQUENCE
    | HEXADECIMALESCAPESEQUENCE;

terminal fragment SIMPLEESCAPESEQUENCE:
    '\\\''
    | '\\"'
    | '\\?'
    | '\\\\'
    | '\\a'
    | '\\b'
    | '\\f'
    | '\\n'
    | '\\r'
    | ('\\' ('\r' '\n'? | '\n'))
    | '\\t'
    | '\\v';

terminal fragment OCTALESCAPESEQUENCE:
    '\\' OCTALDIGIT
    | '\\' OCTALDIGIT OCTALDIGIT
    | '\\' OCTALDIGIT OCTALDIGIT OCTALDIGIT;

terminal fragment HEXADECIMALESCAPESEQUENCE:
    '\\x' HEXADECIMALDIGIT+;

terminal fragment FRACTIONALCONSTANT:
    DIGITSEQUENCE? '.' DIGITSEQUENCE
    | DIGITSEQUENCE '.';

terminal fragment EXPONENTPART:
    ('e' | 'E') SIGN? DIGITSEQUENCE;

terminal fragment SIGN:
    '+' | '-';

terminal fragment DIGITSEQUENCE:
    DIGIT ('\''? DIGIT)*;

terminal fragment FLOATINGSUFFIX:
    'f' | 'F' /*| 'l' | 'L'*/ ;

terminal fragment ENCODINGPREFIX:
    'u8' /*| 'u' | 'U' | 'L'*/ ;

terminal fragment SCHAR:
    // ~ ["\\\r\n]
    !('"' | '\\' | '\r' | '\n')
    | ESCAPESEQUENCE
    | UNIVERSAL_CHARACTER_NAME;

terminal WS:
    (' ' | '\t' | NEW_LINE)+;

terminal fragment NEW_LINE:
    ('\r' '\n'? | '\n');

terminal ML_DOCUMENTATION:
    '/**' (!('*' | '/') .*)? '*/';

terminal ML_COMMENT:
    '/*' (!'*' .* | '*' '*'+ (!('/' | '*') .*)?)? '*/';

terminal SL_COMMENT:
    '//' !('\n' | '\r')* ('\r'? '\n')?;
