<?xml version="1.0" encoding="UTF-8"?>
<Catalogue:Catalogue xmlns:Elements="http://www.ecss.nl/smp/2019/Core/Elements"
                     xmlns:Types="http://www.ecss.nl/smp/2019/Core/Types"
                     xmlns:Catalogue="http://www.ecss.nl/smp/2019/Smdl/Catalogue"
                     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xmlns:xlink="http://www.w3.org/1999/xlink"
                     Id="ecss.smp.smp.cat"
                     Name="ecss_smp_smp"
                     Creator="ECSS E40-07"
                     Date="2019-10-24T17:58:59.567+02:00"
                     Title="SMP Component Model"
                     Version="1.0">
      <!--
This file is generated by the UMF ECSS SMP Catalogue Generation Tool, version 2.1.0.qualifier.

UML Model Information:
    UML model file:  file:/C:/Data/Projects/ECSS16/Software/Windows/pfritzen/SMP/Src/ecss.smp.smp/target/xmi/ecss.smp.smp.xmi
    UML model name:  Overview
    UML metamodel:   http://schema.omg.org/spec/UML/2.2
    XMI version:     2.1
    XMI exporter:    UMF XMI Converter (from MagicDraw UML 17.0.2), version 2.1.0.qualifier

XSLT Processing Information:
    Processing date: 2019-10-24T17:58:59.567+02:00
    XSLT processor:  SAXON 8.8.0.7 from Saxonica
    XSLT version:    2.0
    XSLT stylesheet: xmi-to-cat.xslt
      -->
      <Description>Specifies the SMP Component Model as SMDL Catalogue.</Description>
   <Namespace Id="Smp.Attributes" Name="Attributes">
      <Description>Namespace for standard attributes</Description>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.GetRaises" Name="GetRaises"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed666"
            AllowMultiple="true">
         <Description>This attribute defines that a property setter raises an exception.</Description>
         <Type xlink:title="String8" xlink:href="#Smp.String8"/>
         <Default xsi:type="Types:String8Value" Value="Smp::Exception"/>
         <Usage>Property</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.RaisedException"
            Name="RaisedException"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed665"
            AllowMultiple="true">
         <Description>This attribute defines that an operation raises an exception.</Description>
         <Type xlink:title="String8" xlink:href="#Smp.String8"/>
         <Default xsi:type="Types:String8Value" Value="Smp::Exception"/>
         <Usage>Operation</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.SetRaises" Name="SetRaises"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed667"
            AllowMultiple="true">
         <Description>This attribute defines that a property setter raises an exception.</Description>
         <Type xlink:title="String8" xlink:href="#Smp.String8"/>
         <Default xsi:type="Types:String8Value" Value="Smp::Exception"/>
         <Usage>Property</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Failure" Name="Failure"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed660">
         <Description>This attribute marks a field as being a failure.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Field</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.ConstGetter"
            Name="ConstGetter"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6cd">
         <Description>This attribute defines that a property getter is constant, i.e. does not change the state of the owning class or component.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Property</Usage>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.Attributes.FieldUpdateKind"
            Name="FieldUpdateKind"
            Visibility="public"
            Uuid="cdce9add-f196-11dc-a846-558902839034">
         <Description>This enumeration allows to specify the behaviour when a Trigger is updated.</Description>
         <Literal Id="Smp.Attributes.FieldUpdateKind.None" Name="None" Value="0">
            <Description>Field values are not updated automatically when the entry point is executed. In this case, all field updates must be explicitly scheduled via Transfer elements.</Description>
         </Literal>
         <Literal Id="Smp.Attributes.FieldUpdateKind.Pull" Name="Pull" Value="1">
            <Description>All input fields associated with the entry point are updated from the linked outputs &lt;i&gt;before&lt;/i&gt; the entry point is called.</Description>
         </Literal>
         <Literal Id="Smp.Attributes.FieldUpdateKind.Push" Name="Push" Value="2">
            <Description>The values of all output fields associated with the entry point are automatically transferred to their linked input fields (in other models) &lt;i&gt;after&lt;/i&gt; the entry point has been called.</Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Forcible" Name="Forcible"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed661">
         <Description>This attribute marks a field as being forcible. A forcible field provides support for forcing, i.e. the field value can be forced to a specified value during runtime. The following semantics apply for the different kinds of fields:
&lt;ul&gt;
&lt;li&gt;Input field: The forced value is provided to the model by the simulation environment. The containing model must internally operate on the field value obtained via the IField.GetValue() method, which ensures that the forced value is obtained when forcing is enabled; otherwise the real value is obtained.&lt;/li&gt;
&lt;li&gt;Output field or Input/Output field: The forced value is provided to all connected input fields by the simulation environment (using the IForcibleField interface) according to the Field Links created. The containing model must internally operate on the real (unforced) field value.&lt;/li&gt;
&lt;/ul&gt;
The default value for this attribute is false, which corresponds to no support for forcing.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Field</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Abstract" Name="Abstract"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c1">
         <Description>This attribute specifies that an operation or property is abstract, i.e. that it must be overridden in a derived type. The default value for this attribute is false.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Operation</Usage>
         <Usage>Property</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.BaseClass" Name="BaseClass"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c2">
         <Description>This attribute specifies a name of a C++ class that shall be used as base class (implementation inheritance) for the Class or Structure implementation. This can be used to inherit the implementation from a non-SMP C++ class or structure into an SMP Class or Structure implementation, for example to wrap an existing C++ implementation as SMP Class or Structure. The default value for this attribute is the empty string, which corresponds to no base class.</Description>
         <Type xlink:title="String8" xlink:href="#Smp.String8"/>
         <Default xsi:type="Types:String8Value" Value=""/>
         <Usage>Class</Usage>
         <Usage>Exception</Usage>
         <Usage>Model</Usage>
         <Usage>Service</Usage>
         <Usage>Structure</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.ByPointer" Name="ByPointer"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c3">
         <Description>The ByPointer attribute specifies that a parameter is passed by pointer. The default value for this attribute is false.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Parameter</Usage>
         <Usage>Property</Usage>
         <Usage>Association</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.ByReference"
            Name="ByReference"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c4">
         <Description>This attribute specifies that a parameter is passed by reference. The default value for this attribute is false.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Parameter</Usage>
         <Usage>&quot;Property&quot;</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Const" Name="Const"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c5">
         <Description>This attribute specifies that a feature is &quot;constant&quot; in the following sense:
&lt;ul&gt;
&lt;li&gt;Association: The value of the referenced element is constant, i.e. it cannot be changed during runtime.&lt;/li&gt;
&lt;li&gt;Operation: The state of the containing type (e.g. Model) is constant, i.e. the operation must not change the state during execution.&lt;/li&gt;
&lt;li&gt;Property: The property type is constant, i.e. the property setter must not change the property value during execution.&lt;/li&gt;
&lt;li&gt;Parameter: The value of the parameter is constant, i.e. the operation must not change it during execution. When applied to reference parameters (pointers in C++), the referenced element must not be changed.&lt;/li&gt;
&lt;/ul&gt;
The default value for this attribute is false.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Association</Usage>
         <Usage>Property</Usage>
         <Usage>Operation</Usage>
         <Usage>Parameter</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Constructor"
            Name="Constructor"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c6">
         <Description>This attribute specifies that the operation is mapped to a C++ constructor. The default value for this attribute is false, which corresponds to not mapping to a constructor.
A constructor must not have a return parameter.
The name of the constructor is ignored as the Class or Model name is used in C++.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Operation</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Operator" Name="Operator"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c7">
         <Description>This attribute defines an operator kind for an operation. It can be used to specify that the operation is mapped to a C++ operator. The default value for this attribute is None, which corresponds to not mapping to an operator.</Description>
         <Type xlink:title="OperatorKind" xlink:href="#Smp.Attributes.OperatorKind"/>
         <Default xsi:type="Types:Int32Value" Value="0"/>
         <Usage>Operation</Usage>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.Attributes.OperatorKind"
            Name="OperatorKind"
            Visibility="public"
            Uuid="d5562bc8-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Enumeration of available operator kinds</Description>
         <Literal Id="Smp.Attributes.OperatorKind.None" Name="None" Value="0">
            <Description>No operator</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Positive" Name="Positive" Value="1">
            <Description>Positive value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Negative" Name="Negative" Value="2">
            <Description>Negative value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Assign" Name="Assign" Value="3">
            <Description>Assign new value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Add" Name="Add" Value="4">
            <Description>Add value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Subtract" Name="Subtract" Value="5">
            <Description>Subtract value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Multiply" Name="Multiply" Value="6">
            <Description>Multiply with value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Divide" Name="Divide" Value="7">
            <Description>Divide by value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Remainder" Name="Remainder" Value="8">
            <Description>Remainder of division</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Greater" Name="Greater" Value="9">
            <Description>Is greater than</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Less" Name="Less" Value="10">
            <Description>Is less than</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Equal" Name="Equal" Value="11">
            <Description>Is equal</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.NotGreater" Name="NotGreater" Value="12">
            <Description>Is not greater than</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.NotLess" Name="NotLess" Value="13">
            <Description>Is not less than</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.NotEqual" Name="NotEqual" Value="14">
            <Description>Is not equal</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Indexer" Name="Indexer" Value="15">
            <Description>Index into array</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Sum" Name="Sum" Value="16">
            <Description>Sum of instance and another value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Difference" Name="Difference" Value="17">
            <Description>Difference between instance and another value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Product" Name="Product" Value="18">
            <Description>Product of instance and another value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Quotient" Name="Quotient" Value="19">
            <Description>Quotient of instance and another value</Description>
         </Literal>
         <Literal Id="Smp.Attributes.OperatorKind.Module" Name="Module" Value="20">
            <Description>Remainder of instance divided by another value</Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Static" Name="Static"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c8">
         <Description>This attribute specifies that a feature is static, i.e. that it is defined on type/classifier scope. The default value for this attribute is false, which corresponds to instance scope.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Operation</Usage>
         <Usage>Property</Usage>
         <Usage>Field</Usage>
         <Usage>Association</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Virtual" Name="Virtual"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6c9">
         <Description>This attribute specifies that an operation or property is virtual, i.e. that it may be overridden in a derived type (polymorphism). The default value for this attribute is false.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Operation</Usage>
         <Usage>Property</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.SimpleArray"
            Name="SimpleArray"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed662">
         <Description>This attribute can be applied to an array type to ensure that it is registered into the TypeRegistry as simple array.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>ValueType</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.NoConstructor"
            Name="NoConstructor"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6ca">
         <Description>This attribute identifies that a class or component does not have a default constructor.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Class</Usage>
         <Usage>Model</Usage>
         <Usage>Service</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.NoDestructor"
            Name="NoDestructor"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6cb">
         <Description>This attribute identifies that the destructor of a class or component is defaulted, and hence has no implementation.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Class</Usage>
         <Usage>Model</Usage>
         <Usage>Service</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.Mutable" Name="Mutable"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed6ce">
         <Description>This attribute defines that a field or association is mutable.</Description>
         <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
         <Default xsi:type="Types:BoolValue" Value="true"/>
         <Usage>Field</Usage>
         <Usage>Association</Usage>
      </Type>
      <Type xsi:type="Types:AttributeType" Id="Smp.Attributes.View" Name="View"
            Visibility="public"
            Uuid="8596d697-fb84-41ce-a685-6912006ed664">
         <Description>This attribute can be applied to a Field, Property, Operation or Entry Point to specify the element&apos;s visibility during publication.</Description>
         <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
         <Default xsi:type="Types:Int32Value" Value="0"/>
         <Usage>Field</Usage>
         <Usage>Property</Usage>
         <Usage>Operation</Usage>
         <Usage>EntryPoint</Usage>
      </Type>
   </Namespace>
   <Namespace Id="Smp" Name="Smp">
      <Description>SMP standard types and interfaces.</Description>
      <Namespace Id="Smp.Publication" Name="Publication">
         <Description>Namespace for publication</Description>
         <Type xsi:type="Types:Exception" Id="Smp.Publication.DuplicateLiteral"
               Name="DuplicateLiteral"
               Visibility="public"
               Uuid="eb59084a-47c5-11e8-845f-c7d886caef82">
            <Description>This exception is raised when trying to add a literal to an enumeration using a value that has been used for another literal before.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Publication.DuplicateLiteral.GetLiteralName" Name="GetLiteralName"
                       Visibility="public">
               <Description>Get the name of the literal that has been added before using the same value.</Description>
               <Parameter Id="Smp.Publication.DuplicateLiteral.GetLiteralName.return" Name="return"
                          Direction="return">
                  <Description>Name of the literal.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.DuplicateLiteral.GetLiteralValue" Name="GetLiteralValue"
                       Visibility="public">
               <Description>Get the value of the literal that has been used before.</Description>
               <Parameter Id="Smp.Publication.DuplicateLiteral.GetLiteralValue.return" Name="return"
                          Direction="return">
                  <Description>Value of the literal.</Description>
                  <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Publication.InvalidPrimitiveType"
               Name="InvalidPrimitiveType"
               Visibility="public"
               Uuid="9774fa73-43a9-11e8-af4a-7bb62c2fdc04">
            <Description>This exception is raised when trying to use an invalid primitive type kind as parameter for a user-defined float or integer type.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Publication.InvalidPrimitiveType.GetTypeName" Name="GetTypeName"
                       Visibility="public">
               <Description>Get the name of the invalid type that cannot be used.</Description>
               <Parameter Id="Smp.Publication.InvalidPrimitiveType.GetTypeName.return" Name="return"
                          Direction="return">
                  <Description>Name of the new type that cannot be registered.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.InvalidPrimitiveType.GetType" Name="GetType"
                       Visibility="public">
               <Description>Get the invalid type that cannot be used.</Description>
               <Parameter Id="Smp.Publication.InvalidPrimitiveType.GetType.return" Name="return"
                          Direction="return">
                  <Description>Type that uses the same Uuid.</Description>
                  <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Publication.TypeAlreadyRegistered"
               Name="TypeAlreadyRegistered"
               Visibility="public"
               Uuid="d5562bbf-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is raised when trying to register a type with a Uuid that has already been registered.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Publication.TypeAlreadyRegistered.GetTypeName" Name="GetTypeName"
                       Visibility="public">
               <Description>Get the name of the new type that cannot be registered.</Description>
               <Parameter Id="Smp.Publication.TypeAlreadyRegistered.GetTypeName.return" Name="return"
                          Direction="return">
                  <Description>Name of the new type that cannot be registered.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.TypeAlreadyRegistered.GetType" Name="GetType"
                       Visibility="public">
               <Description>Get the type that uses the same Uuid.</Description>
               <Parameter Id="Smp.Publication.TypeAlreadyRegistered.GetType.return" Name="return"
                          Direction="return">
                  <Description>Type that uses the same Uuid.</Description>
                  <Metadata xsi:type="Types:Attribute"
                            Id="Smp.Publication.TypeAlreadyRegistered.GetType.return.Const"
                            Name="Const">
                     <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                     <Value xsi:type="Types:BoolValue" Value="true"/>
                  </Metadata>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Publication.TypeNotRegistered"
               Name="TypeNotRegistered"
               Visibility="public"
               Uuid="d5562bba-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is raised when trying to publish a feature with a type Uuid that has not been registered.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Publication.TypeNotRegistered.GetUuid" Name="GetUuid"
                       Visibility="public">
               <Description>Get the Uuid for which no type has been registered.</Description>
               <Parameter Id="Smp.Publication.TypeNotRegistered.GetUuid.return" Name="return"
                          Direction="return">
                  <Description>Uuid for which no type has been registered.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Enumeration" Id="Smp.Publication.ParameterDirectionKind"
               Name="ParameterDirectionKind"
               Visibility="public"
               Uuid="1b3641ad-f0f0-11dc-b3ae-77a8f1ab4ab6">
            <Description>The Parameter Direction Kind enumeration defines the possible parameter directions.</Description>
            <Literal Id="Smp.Publication.ParameterDirectionKind.PDK_In" Name="PDK_In" Value="0">
               <Description>The parameter is read-only to the operation, i.e. its value must be specified on call, and cannot be changed inside the operation.</Description>
            </Literal>
            <Literal Id="Smp.Publication.ParameterDirectionKind.PDK_Out" Name="PDK_Out" Value="1">
               <Description>The parameter is write-only to the operation, i.e. its value is unspecified on call, and must be set by the operation.</Description>
            </Literal>
            <Literal Id="Smp.Publication.ParameterDirectionKind.PDK_InOut" Name="PDK_InOut"
                     Value="2">
               <Description>The parameter must be specified on call, and may be changed by the operation.</Description>
            </Literal>
            <Literal Id="Smp.Publication.ParameterDirectionKind.PDK_Return" Name="PDK_Return"
                     Value="3">
               <Description>The parameter represents the operation&apos;s return value.</Description>
            </Literal>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.ITypeRegistry"
               Name="ITypeRegistry"
               Visibility="public"
               Uuid="d553e151-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface defines a registration mechanism for user defined types.</Description>
            <Operation Id="Smp.Publication.ITypeRegistry.GetType1" Name="GetType" Visibility="public">
               <Description>Returns a type by its primitive type kind.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.GetType1.return" Name="return"
                          Direction="return">
                  <Description>Interface to the requested type.</Description>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.GetType.type" Name="type">
                  <Description>Primitive type the type is requested for.</Description>
                  <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.GetType2" Name="GetType" Visibility="public">
               <Description>Returns a type by universally unique identifier.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.GetType2.return" Name="return"
                          Direction="return">
                  <Description>Interface of the requested type, or null if no type with the registered Uuid could be found.</Description>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.GetType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier for the requested type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddFloatType" Name="AddFloatType"
                       Visibility="public">
               <Description>Add a float type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.description" Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.minimum" Name="minimum">
                  <Description>Minimum value for float.</Description>
                  <Type xlink:title="Float64" xlink:href="#Smp.Float64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.maximum" Name="maximum">
                  <Description>Maximum value for float.</Description>
                  <Type xlink:title="Float64" xlink:href="#Smp.Float64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.minInclusive"
                          Name="minInclusive">
                  <Description>Flag whether the minimum value for float is valid or not.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.maxInclusive"
                          Name="maxInclusive">
                  <Description>Flag whether the maximum value for float is valid or not.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.unit" Name="unit">
                  <Description>Unit of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.type" Name="type">
                  <Description>Primitive type to use for Float type. This has to be either PTK_Float32 or PTK_Float64. For all other types, an exception of type InvalidPrimitiveType is raised.</Description>
                  <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
                  <Default xsi:type="Types:Int32Value" Value="12"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddFloatType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type.</Description>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
               <RaisedException xlink:title="InvalidPrimitiveType"
                                xlink:href="#Smp.Publication.InvalidPrimitiveType"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddIntegerType" Name="AddIntegerType"
                       Visibility="public">
               <Description>Add an integer type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.description"
                          Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.minimum" Name="minimum">
                  <Description>Minimum value for integer.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.maximum" Name="maximum">
                  <Description>Maximum value for integer.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.unit" Name="unit">
                  <Description>Unit of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.type" Name="type">
                  <Description>Primitive type to use for Integer type. This has to be one of the available signed or unsigned integer types. For all other types, an exception of type InvalidPrimitiveType is raised.</Description>
                  <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
                  <Default xsi:type="Types:Int32Value" Value="11"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddIntegerType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type.</Description>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
               <RaisedException xlink:title="InvalidPrimitiveType"
                                xlink:href="#Smp.Publication.InvalidPrimitiveType"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddEnumerationType" Name="AddEnumerationType"
                       Visibility="public">
               <Description>Add an enumeration type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddEnumerationType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddEnumerationType.description"
                          Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddEnumerationType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddEnumerationType.memorySize"
                          Name="memorySize">
                  <Description>Size of an instance of this enumeration in bytes. Valid values are 1, 2, 4 and 8.</Description>
                  <Type xlink:title="Int16" xlink:href="#Smp.Int16"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddEnumerationType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type.</Description>
                  <Type xlink:title="IEnumerationType" xlink:href="#Smp.Publication.IEnumerationType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddArrayType" Name="AddArrayType"
                       Visibility="public">
               <Description>Add an array type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.description" Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.itemTypeUuid"
                          Name="itemTypeUuid">
                  <Description>Universally unique identifier of the Type of the array items.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.itemSize" Name="itemSize">
                  <Description>Size of an array item in bytes. This needs to take possible padding into account, as it may be used by the simulation environment to calculate the memory offset between array items.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.arrayCount" Name="arrayCount">
                  <Description>Number of elements in the array.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.simpleArray" Name="simpleArray">
                  <Description>True if array shall be implemented using ISimpleArrayField, i.e. without representing array items as fields.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddArrayType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type.</Description>
                  <Type xlink:title="IArrayType" xlink:href="#Smp.Publication.IArrayType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddStringType" Name="AddStringType"
                       Visibility="public">
               <Description>Add a string type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStringType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStringType.description" Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStringType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStringType.length" Name="length">
                  <Description>Maximum length of the string.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStringType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type.</Description>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddStructureType" Name="AddStructureType"
                       Visibility="public">
               <Description>Add a structure type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStructureType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStructureType.description"
                          Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStructureType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddStructureType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type that allows adding fields.</Description>
                  <Type xlink:title="IStructureType" xlink:href="#Smp.Publication.IStructureType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
            </Operation>
            <Operation Id="Smp.Publication.ITypeRegistry.AddClassType" Name="AddClassType"
                       Visibility="public">
               <Description>Add a class type to the registry.</Description>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddClassType.name" Name="name">
                  <Description>Name of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddClassType.description" Name="description">
                  <Description>Description of the type.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddClassType.typeUuid" Name="typeUuid">
                  <Description>Universally unique identifier of the type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddClassType.baseClassUuid"
                          Name="baseClassUuid">
                  <Description>Universally unique identifier of the base class.
Use Uuid_Void when the type has no base type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.ITypeRegistry.AddClassType.return" Name="return"
                          Direction="return">
                  <Description>Interface to new type that allows adding fields.</Description>
                  <Type xlink:title="IClassType" xlink:href="#Smp.Publication.IClassType"/>
               </Parameter>
               <RaisedException xlink:title="TypeAlreadyRegistered"
                                xlink:href="#Smp.Publication.TypeAlreadyRegistered"/>
            </Operation>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IType" Name="IType"
               Visibility="public"
               Uuid="d5517107-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This base interface defines a type in the type registry.</Description>
            <Operation Id="Smp.Publication.IType.GetPrimitiveTypeKind" Name="GetPrimitiveTypeKind"
                       Visibility="public">
               <Description>Get primitive type kind that this type maps to, or PTK_None when the type cannot be mapped to a primitive type.</Description>
               <Parameter Id="Smp.Publication.IType.GetPrimitiveTypeKind.return" Name="return"
                          Direction="return">
                  <Description>Primitive type kind that this type can be mapped to, or PTK_None for none.</Description>
                  <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.IType.GetUuid" Name="GetUuid" Visibility="public">
               <Description>Get Universally Unique Identifier of type.</Description>
               <Parameter Id="Smp.Publication.IType.GetUuid.return" Name="return" Direction="return">
                  <Description>Universally Unique Identifier of type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.IType.Publish" Name="Publish" Visibility="public">
               <Description>Publish an instance of the type against a receiver.</Description>
               <Parameter Id="Smp.Publication.IType.Publish.receiver" Name="receiver" Direction="inout">
                  <Description>Receiver to publish against.</Description>
                  <Type xlink:title="IPublication" xlink:href="#Smp.IPublication"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.name" Name="name">
                  <Description>Name of instance.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.description" Name="description">
                  <Description>Description of instance.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.address" Name="address" Direction="inout">
                  <Description>Address of instance.</Description>
                  <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.view" Name="view">
                  <Description>View kind of instance.</Description>
                  <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
                  <Default xsi:type="Types:Int32Value" Value="3"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.state" Name="state">
                  <Description>State flag of instance.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="true"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.input" Name="input">
                  <Description>Input flag of instance.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="false"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IType.Publish.output" Name="output">
                  <Description>Output flag of instance.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="false"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IEnumerationType"
               Name="IEnumerationType"
               Visibility="public"
               Uuid="d5517145-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface defines a user defined enumeration type.</Description>
            <Operation Id="Smp.Publication.IEnumerationType.AddLiteral" Name="AddLiteral"
                       Visibility="public">
               <Description>Add a literal to the Enumeration.
If the name is not a valid object name, an exception of type InvalidObjectName is thrown.
If the name has already been used for another literal, an exception of type DuplicateName is thrown.
If the value has already been used for another literal, a exception of type DuplicateLiteral is thrown.</Description>
               <Parameter Id="Smp.Publication.IEnumerationType.AddLiteral.name" Name="name">
                  <Description>Name of the literal.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IEnumerationType.AddLiteral.description" Name="description">
                  <Description>Description of the literal.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IEnumerationType.AddLiteral.value" Name="value">
                  <Description>Value of the literal</Description>
                  <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
               </Parameter>
               <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
               <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
               <RaisedException xlink:title="DuplicateLiteral" xlink:href="#Smp.Publication.DuplicateLiteral"/>
            </Operation>
            <Base xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IArrayType"
               Name="IArrayType"
               Visibility="public"
               Uuid="9774fa68-43a9-11e8-af4a-7bb62c2fdc04">
            <Description>This interface defines a user defined array type.</Description>
            <Operation Id="Smp.Publication.IArrayType.GetSize" Name="GetSize" Visibility="public">
               <Description>Get the size (number of array items) of the array type.</Description>
               <Parameter Id="Smp.Publication.IArrayType.GetSize.return" Name="return" Direction="return">
                  <Description>Size (number of array items) of the array type.</Description>
                  <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Publication.IArrayType.GetItemType" Name="GetItemType"
                       Visibility="public">
               <Description>Get the type of each array item.
Within one array, each array item needs to be of the same type.</Description>
               <Parameter Id="Smp.Publication.IArrayType.GetItemType.return" Name="return"
                          Direction="return">
                  <Description>Type of each array item.</Description>
                  <Metadata xsi:type="Types:Attribute"
                            Id="Smp.Publication.IArrayType.GetItemType.return.Const"
                            Name="Const">
                     <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                     <Value xsi:type="Types:BoolValue" Value="true"/>
                  </Metadata>
                  <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IStructureType"
               Name="IStructureType"
               Visibility="public"
               Uuid="d5517128-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface defines a user defined structure type.</Description>
            <Operation Id="Smp.Publication.IStructureType.AddField" Name="AddField"
                       Visibility="public">
               <Description>Add a field to the Structure.</Description>
               <Parameter Id="Smp.Publication.IStructureType.AddField.name" Name="name">
                  <Description>Name of field.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.description" Name="description">
                  <Description>Description of field.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.uuid" Name="uuid">
                  <Description>Uuid of field Type, which must be a value type, but not String8.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.offset" Name="offset">
                  <Description>Memory offset of field relative to Structure.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.view" Name="view">
                  <Description>View kind of field.</Description>
                  <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
                  <Default xsi:type="Types:Int32Value" Value="3"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.state" Name="state">
                  <Description>State flag of field. When true, the field shall be part of a state vector (Store/Restore).</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="true"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.input" Name="input">
                  <Description>Input flag of field. When true, the field can be used as target of a dataflow connection.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="false"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IStructureType.AddField.output" Name="output">
                  <Description>Output flag of field. When true, the field can be used as source of a dataflow connection.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="false"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IClassType"
               Name="IClassType"
               Visibility="public"
               Uuid="d5517142-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface defines a user defined class type.</Description>
            <Base xlink:title="IStructureType" xlink:href="#Smp.Publication.IStructureType"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Publication.IPublishOperation"
               Name="IPublishOperation"
               Visibility="public"
               Uuid="d54f270c-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface provides functionality to publish operation parameters.</Description>
            <Operation Id="Smp.Publication.IPublishOperation.PublishParameter" Name="PublishParameter"
                       Visibility="public">
               <Description>Publish a parameter of an operation with the given name, description, type and direction.
If a parameter with the same name has already been published, and exception of type DuplicateName is thrown.
If the name is not a valid name, an exception of type InvalidObjectName is thrown.
If no type with the given type UUID exists, an exception of type TypeNotRegistered is thrown.</Description>
               <Parameter Id="Smp.Publication.IPublishOperation.PublishParameter.name" Name="name">
                  <Description>Name of parameter.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IPublishOperation.PublishParameter.description"
                          Name="description">
                  <Description>Description of parameter.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IPublishOperation.PublishParameter.typeUuid"
                          Name="typeUuid">
                  <Description>Uuid of parameter type.</Description>
                  <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
               </Parameter>
               <Parameter Id="Smp.Publication.IPublishOperation.PublishParameter.direction"
                          Name="direction">
                  <Description>Direction kind of parameter.</Description>
                  <Type xlink:title="ParameterDirectionKind"
                        xlink:href="#Smp.Publication.ParameterDirectionKind"/>
                  <Default xsi:type="Types:Int32Value" Value="0"/>
               </Parameter>
               <RaisedException xlink:title="TypeNotRegistered" xlink:href="#Smp.Publication.TypeNotRegistered"/>
               <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
               <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
            </Operation>
         </Type>
      </Namespace>
      <Namespace Id="Smp.Services" Name="Services">
         <Description>Namespace for simulation services</Description>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.ILinkRegistry"
               Name="ILinkRegistry"
               Visibility="public"
               Uuid="d54f26d7-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface is implemented by the Link Registry Service.</Description>
            <Constant Id="Smp.Services.ILinkRegistry.SMP_LinkRegistry" Name="SMP_LinkRegistry"
                      Visibility="public">
               <Description>Name of the LinkRegistry service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="LinkRegistry"/>
            </Constant>
            <Operation Id="Smp.Services.ILinkRegistry.AddLink" Name="AddLink" Visibility="public">
               <Description>Add a link from source component to target component.
This increments the link count between source and target.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.AddLink.source" Name="source" Direction="inout">
                  <Description>Source component of link (i.e. the component that links to another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.AddLink.target" Name="target">
                  <Description>Target component of link (i.e. the component that is being linked to by another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILinkRegistry.GetLinkCount" Name="GetLinkCount"
                       Visibility="public">
               <Description>Returns the number of links between source and target.
This number is incremented each time AddLink() is called, and decremented each time that RemoveLink() is called.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.GetLinkCount.return" Name="return"
                          Direction="return">
                  <Description>True if such a link has been added before (and not been removed), false otherwise.</Description>
                  <Type xlink:title="UInt32" xlink:href="#Smp.UInt32"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.GetLinkCount.source" Name="source">
                  <Description>Source component of link (i.e. the component that links to another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.GetLinkCount.target" Name="target">
                  <Description>Target component of link (i.e. the component that is being linked to by another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILinkRegistry.RemoveLink" Name="RemoveLink"
                       Visibility="public">
               <Description>Remove a link between source and target that has been added to the service using AddLink() before.
This decrements the link count between source and target.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.RemoveLink.source" Name="source">
                  <Description>Source component of link (i.e. the component that links to another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.RemoveLink.target" Name="target">
                  <Description>Target component of link (i.e. the component that is being linked to by another component).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.RemoveLink.return" Name="return"
                          Direction="return">
                  <Description>True if the link count between source and target had been positive and has been decremented, false if the link count had already been 0.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILinkRegistry.GetLinkSources" Name="GetLinkSources"
                       Visibility="public">
               <Description>Returns a collection of all sources that have a link to the given target.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.GetLinkSources.return" Name="return"
                          Direction="return">
                  <Description>Collection of source components which link to the given target.</Description>
                  <Type xlink:title="ComponentCollection" xlink:href="#Smp.ComponentCollection"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.GetLinkSources.target" Name="target">
                  <Description>Target component to return link sources for.</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILinkRegistry.CanRemove" Name="CanRemove" Visibility="public">
               <Description>Returns true if all sources linking to the given target can be asked to remove their link(s), false otherwise.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.CanRemove.return" Name="return"
                          Direction="return">
                  <Description>True if all links to the given target can be removed, false otherwise.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILinkRegistry.CanRemove.target" Name="target">
                  <Description>Target component to check for links.</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILinkRegistry.RemoveLinks" Name="RemoveLinks"
                       Visibility="public">
               <Description>Removes all links to the given target.</Description>
               <Parameter Id="Smp.Services.ILinkRegistry.RemoveLinks.target" Name="target">
                  <Description>Target component of link (i.e. the component that is being linked to by other components).</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.EntryPointAlreadySubscribed"
               Name="EntryPointAlreadySubscribed"
               Visibility="public"
               Uuid="d54f26af-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is raised when trying to subscribe an entry point to an event that is already subscribed.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Services.EntryPointAlreadySubscribed.GetEntryPoint"
                       Name="GetEntryPoint"
                       Visibility="public">
               <Description>Get the entry point that is already subscribed to the event.</Description>
               <Parameter Id="Smp.Services.EntryPointAlreadySubscribed.GetEntryPoint.return"
                          Name="return"
                          Direction="return">
                  <Description>Entry point that is already subscribed to the event.</Description>
                  <Metadata xsi:type="Types:Attribute"
                            Id="Smp.Services.EntryPointAlreadySubscribed.GetEntryPoint.return.Const"
                            Name="Const">
                     <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                     <Value xsi:type="Types:BoolValue" Value="true"/>
                  </Metadata>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.EntryPointAlreadySubscribed.GetEventName" Name="GetEventName"
                       Visibility="public">
               <Description>Get the name of the event that the entry point is already subscribed to.</Description>
               <Parameter Id="Smp.Services.EntryPointAlreadySubscribed.GetEventName.return" Name="return"
                          Direction="return">
                  <Description>Name of the event that the entry point is already subscribed to.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.EntryPointNotSubscribed"
               Name="EntryPointNotSubscribed"
               Visibility="public"
               Uuid="d54f26b6-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is raised when trying to unsubscribe an entry point from an event that is not subscribed to it.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Services.EntryPointNotSubscribed.GetEntryPoint" Name="GetEntryPoint"
                       Visibility="public">
               <Description>Get the entry point that is not subscribed to the event.</Description>
               <Parameter Id="Smp.Services.EntryPointNotSubscribed.GetEntryPoint.return" Name="return"
                          Direction="return">
                  <Description>Entry point that is not subscribed to the event.</Description>
                  <Metadata xsi:type="Types:Attribute"
                            Id="Smp.Services.EntryPointNotSubscribed.GetEntryPoint.return.Const"
                            Name="Const">
                     <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                     <Value xsi:type="Types:BoolValue" Value="true"/>
                  </Metadata>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.EntryPointNotSubscribed.GetEventName" Name="GetEventName"
                       Visibility="public">
               <Description>Get the name of the event that the entry point is not subscribed to.</Description>
               <Parameter Id="Smp.Services.EntryPointNotSubscribed.GetEventName.return" Name="return"
                          Direction="return">
                  <Description>Name of the event that the entry point is not subscribed to.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.InvalidCycleTime"
               Name="InvalidCycleTime"
               Visibility="public"
               Uuid="d54a451e-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is thrown by one of the AddEvent() methods of the scheduler when the event is a cyclic event (i.e. repeat is not 0), but the cycle time specified is not a positive duration.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.InvalidEventName"
               Name="InvalidEventName"
               Visibility="public"
               Uuid="96e6f604-e943-11e9-a377-f3d7a7ed9a31">
            <Description>This exception is thrown by the QueryEventId() method of the event manger when an empty event name has been provided.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.InvalidEventTime"
               Name="InvalidEventTime"
               Visibility="public"
               Uuid="d54a451c-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is thrown by one of the AddEvent() methods of the scheduler when the time specified for the first execution of the event is in the past.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.InvalidSimulationTime"
               Name="InvalidSimulationTime"
               Visibility="public"
               Uuid="b31f9aa2-cde0-11e6-a1c3-13e36fcced83">
            <Description>This exception is thrown by SetSimulationTime if the new simulation time is not between the current simulation time and the simulation time of the next event on the scheduler.</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Services.InvalidSimulationTime.GetCurrentTime" Name="GetCurrentTime"
                       Visibility="public">
               <Description>Get the current simulation time maintained by the time keeper.</Description>
               <Parameter Id="Smp.Services.InvalidSimulationTime.GetCurrentTime.return" Name="return"
                          Direction="return">
                  <Description>Current simulation time maintained by the time keeper.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.InvalidSimulationTime.GetProvidedTime" Name="GetProvidedTime"
                       Visibility="public">
               <Description>Get the simulation time provided to SetSimulationTime.</Description>
               <Parameter Id="Smp.Services.InvalidSimulationTime.GetProvidedTime.return" Name="return"
                          Direction="return">
                  <Description>Simulation time provided to SetSimulationTime.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.InvalidSimulationTime.GetMaximumTime" Name="GetMaximumTime"
                       Visibility="public">
               <Description>Get the maximum simulation time that can be set using SetSimulationTime.</Description>
               <Parameter Id="Smp.Services.InvalidSimulationTime.GetMaximumTime.return" Name="return"
                          Direction="return">
                  <Description>Maximum simulation time that can be set using SetSimulationTime.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.ILogger" Name="ILogger"
               Visibility="public"
               Uuid="d5434051-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface gives access to the Logger Service.</Description>
            <Constant Id="Smp.Services.ILogger.LMK_Information" Name="LMK_Information"
                      Visibility="public">
               <Description>The message contains general information.</Description>
               <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               <Value xsi:type="Types:Int64Value" Value="0"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_Event" Name="LMK_Event" Visibility="public">
               <Description>The message has been sent from an event, typically from a state transition.</Description>
               <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               <Value xsi:type="Types:Int64Value" Value="1"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_Warning" Name="LMK_Warning" Visibility="public">
               <Description>The message contains a warning.</Description>
               <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               <Value xsi:type="Types:Int64Value" Value="2"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_Error" Name="LMK_Error" Visibility="public">
               <Description>The message has been raised because of an error.</Description>
               <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               <Value xsi:type="Types:Int64Value" Value="3"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_Debug" Name="LMK_Debug" Visibility="public">
               <Description>The message contains debug information.</Description>
               <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               <Value xsi:type="Types:Int64Value" Value="4"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_InformationName" Name="LMK_InformationName"
                      Visibility="public">
               <Description>The message contains general information.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Information"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_DebugName" Name="LMK_DebugName"
                      Visibility="public">
               <Description>The message contains debug information.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Debug"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_ErrorName" Name="LMK_ErrorName"
                      Visibility="public">
               <Description>The message has been raised because of an error.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Error"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_WarningName" Name="LMK_WarningName"
                      Visibility="public">
               <Description>The message contains a warning.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Warning"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.LMK_EventName" Name="LMK_EventName"
                      Visibility="public">
               <Description>The message has been sent from an event, typically from a state transition.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Event"/>
            </Constant>
            <Constant Id="Smp.Services.ILogger.SMP_Logger" Name="SMP_Logger" Visibility="public">
               <Description>Name of the Logger service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Logger"/>
            </Constant>
            <Operation Id="Smp.Services.ILogger.QueryLogMessageKind" Name="QueryLogMessageKind"
                       Visibility="public">
               <Description>Return identifier of log message kind by name. 
</Description>
               <Parameter Id="Smp.Services.ILogger.QueryLogMessageKind.return" Name="return"
                          Direction="return">
                  <Description>Identifier of log message kind.</Description>
                  <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILogger.QueryLogMessageKind.messageKindName"
                          Name="messageKindName">
                  <Description>Name of log message kind.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ILogger.Log" Name="Log" Visibility="public">
               <Description>This function logs a message to the simulation log.</Description>
               <Parameter Id="Smp.Services.ILogger.Log.sender" Name="sender">
                  <Description>Object that sends the message.</Description>
                  <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILogger.Log.message" Name="message">
                  <Description>The message to log.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Services.ILogger.Log.kind" Name="kind">
                  <Description>Kind of message.</Description>
                  <Type xlink:title="LogMessageKind" xlink:href="#Smp.Services.LogMessageKind"/>
                  <Default xsi:type="Types:Int64Value" Value="0"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
         <Type xsi:type="Types:Integer" Id="Smp.Services.LogMessageKind" Name="LogMessageKind"
               Visibility="public"
               Uuid="d543404f-e618-11dc-ab64-bf8df6d7b83a"
               Minimum="0"
               Maximum="2147483647">
            <Description>This type is used as identifier of a log message kind.</Description>
            <PrimitiveType xlink:title="Int32" xlink:href="#Smp.Int32"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.ITimeKeeper" Name="ITimeKeeper"
               Visibility="public"
               Uuid="d5458977-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface gives access to the Time Keeper Service.</Description>
            <Constant Id="Smp.Services.ITimeKeeper.SMP_TimeKeeper" Name="SMP_TimeKeeper"
                      Visibility="public">
               <Description>Name of the TimeKeeper service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="TimeKeeper"/>
            </Constant>
            <Operation Id="Smp.Services.ITimeKeeper.GetSimulationTime" Name="GetSimulationTime"
                       Visibility="public">
               <Description>Return Simulation time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.GetSimulationTime.return" Name="return"
                          Direction="return">
                  <Description>Current simulation time.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.GetEpochTime" Name="GetEpochTime"
                       Visibility="public">
               <Description>Return Epoch time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.GetEpochTime.return" Name="return"
                          Direction="return">
                  <Description>Current epoch time.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.GetMissionStartTime" Name="GetMissionStartTime"
                       Visibility="public">
               <Description>Get mission start time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.GetMissionStartTime.missionStart"
                          Name="missionStart"
                          Direction="return">
                  <Description>Mission start date and time.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.GetMissionTime" Name="GetMissionTime"
                       Visibility="public">
               <Description>Return Mission time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.GetMissionTime.return" Name="return"
                          Direction="return">
                  <Description>Current mission time.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.GetZuluTime" Name="GetZuluTime"
                       Visibility="public">
               <Description>Return Zulu time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.GetZuluTime.return" Name="return"
                          Direction="return">
                  <Description>Current Zulu time.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.SetSimulationTime" Name="SetSimulationTime"
                       Visibility="public">
               <Description>Manually advance Simulation time.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.SetSimulationTime.simulationTime"
                          Name="simulationTime">
                  <Description>New value of simulation time to set in the Time Keeper. This has to be in the future.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <RaisedException xlink:title="InvalidSimulationTime"
                                xlink:href="#Smp.Services.InvalidSimulationTime"/>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.SetEpochTime" Name="SetEpochTime"
                       Visibility="public">
               <Description>Set Epoch time. 
</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.SetEpochTime.epochTime" Name="epochTime">
                  <Description>New epoch time.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.SetMissionStartTime" Name="SetMissionStartTime"
                       Visibility="public">
               <Description>Set Mission time by defining the mission start time.
In future calls to GetMissionTime, the mission time is calculated using the formula MissionTime = EpochTime - missionStart.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.SetMissionStartTime.missionStart"
                          Name="missionStart">
                  <Description>New mission start date and time.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.ITimeKeeper.SetMissionTime" Name="SetMissionTime"
                       Visibility="public">
               <Description>Set Mission time by providing the current mission time.
This effectively sets the MissionStartTime using the formula MissionStartTime = EpochTime - missionTime.</Description>
               <Parameter Id="Smp.Services.ITimeKeeper.SetMissionTime.missionTime" Name="missionTime">
                  <Description>New mission time.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
         <Type xsi:type="Types:Enumeration" Id="Smp.Services.TimeKind" Name="TimeKind"
               Visibility="public"
               Uuid="d54589a6-e618-11dc-ab64-bf8df6d7b83a">
            <Description>Enumeration of supported time kinds.</Description>
            <Literal Id="Smp.Services.TimeKind.TK_SimulationTime" Name="TK_SimulationTime" Value="0">
               <Description>Simulation time.</Description>
            </Literal>
            <Literal Id="Smp.Services.TimeKind.TK_MissionTime" Name="TK_MissionTime" Value="1">
               <Description>Mission time.</Description>
            </Literal>
            <Literal Id="Smp.Services.TimeKind.TK_EpochTime" Name="TK_EpochTime" Value="2">
               <Description>Epoch time.</Description>
            </Literal>
            <Literal Id="Smp.Services.TimeKind.TK_ZuluTime" Name="TK_ZuluTime" Value="3">
               <Description>Zulu time.</Description>
            </Literal>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.IScheduler" Name="IScheduler"
               Visibility="public"
               Uuid="d54589b4-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface gives access to the Scheduler Service.</Description>
            <Constant Id="Smp.Services.IScheduler.SMP_Scheduler" Name="SMP_Scheduler"
                      Visibility="public">
               <Description>Name of the Scheduler service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Scheduler"/>
            </Constant>
            <Operation Id="Smp.Services.IScheduler.AddImmediateEvent" Name="AddImmediateEvent"
                       Visibility="public">
               <Description>Add an immediate event to the scheduler.</Description>
               <Parameter Id="Smp.Services.IScheduler.AddImmediateEvent.entryPoint" Name="entryPoint">
                  <Description>Entry point to call from event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddImmediateEvent.return" Name="return"
                          Direction="return">
                  <Description>Event identifier that can be used to change or remove event.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.AddSimulationTimeEvent"
                       Name="AddSimulationTimeEvent"
                       Visibility="public">
               <Description>Add event to scheduler that is called based on simulation time.</Description>
               <Parameter Id="Smp.Services.IScheduler.AddSimulationTimeEvent.return" Name="return"
                          Direction="return">
                  <Description>Event identifier that can be used to change or remove event.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddSimulationTimeEvent.entryPoint"
                          Name="entryPoint">
                  <Description>Entry point to call from event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddSimulationTimeEvent.simulationTime"
                          Name="simulationTime">
                  <Description>Duration from now when to trigger the event for the first time.
This must not be a negative simulation time, as this would be in the past.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddSimulationTimeEvent.cycleTime" Name="cycleTime">
                  <Description>Duration between two triggers of the event.
When repeat is not zero, this must be a positive duration.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
                  <Default xsi:type="Types:DurationValue" Value="PT0S"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddSimulationTimeEvent.repeat" Name="repeat">
                  <Description>Number of times the event shall be repeated, or 0 for a single event, or -1 for no limit.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
                  <Default xsi:type="Types:Int64Value" Value="0"/>
               </Parameter>
               <RaisedException xlink:title="InvalidCycleTime" xlink:href="#Smp.Services.InvalidCycleTime"/>
               <RaisedException xlink:title="InvalidEventTime" xlink:href="#Smp.Services.InvalidEventTime"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.AddMissionTimeEvent" Name="AddMissionTimeEvent"
                       Visibility="public">
               <Description>Add event to scheduler that is called based on mission time.</Description>
               <Parameter Id="Smp.Services.IScheduler.AddMissionTimeEvent.return" Name="return"
                          Direction="return">
                  <Description>Event identifier that can be used to change or remove event.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddMissionTimeEvent.entryPoint" Name="entryPoint">
                  <Description>Entry point to call from event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddMissionTimeEvent.missionTime" Name="missionTime">
                  <Description>Absolute mission time when to trigger the event for the first time.
This must not be a mission time in the past.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddMissionTimeEvent.cycleTime" Name="cycleTime">
                  <Description>Duration between two triggers of the event.
When repeat is not zero, this must be a positive duration.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
                  <Default xsi:type="Types:DurationValue" Value="PT0S"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddMissionTimeEvent.repeat" Name="repeat">
                  <Description>Number of times the event shall be repeated, or 0 for a single event, or -1 for no limit.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
                  <Default xsi:type="Types:Int64Value" Value="0"/>
               </Parameter>
               <RaisedException xlink:title="InvalidCycleTime" xlink:href="#Smp.Services.InvalidCycleTime"/>
               <RaisedException xlink:title="InvalidEventTime" xlink:href="#Smp.Services.InvalidEventTime"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.AddEpochTimeEvent" Name="AddEpochTimeEvent"
                       Visibility="public">
               <Description>Add event to scheduler that is called based on epoch time.</Description>
               <Parameter Id="Smp.Services.IScheduler.AddEpochTimeEvent.return" Name="return"
                          Direction="return">
                  <Description>Event identifier that can be used to change or remove event.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddEpochTimeEvent.entryPoint" Name="entryPoint">
                  <Description>Entry point to call from event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddEpochTimeEvent.epochTime" Name="epochTime">
                  <Description>Epoch time when to trigger the event for the first time.
This must not be an epoch time in the past.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddEpochTimeEvent.cycleTime" Name="cycleTime">
                  <Description>Duration between two triggers of the event.
When repeat is not zero, this must be a positive duration.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
                  <Default xsi:type="Types:DurationValue" Value="PT0S"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddEpochTimeEvent.repeat" Name="repeat">
                  <Description>Number of times the event shall be repeated, or 0 for a single event, or -1 for no limit.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
                  <Default xsi:type="Types:Int64Value" Value="0"/>
               </Parameter>
               <RaisedException xlink:title="InvalidCycleTime" xlink:href="#Smp.Services.InvalidCycleTime"/>
               <RaisedException xlink:title="InvalidEventTime" xlink:href="#Smp.Services.InvalidEventTime"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.AddZuluTimeEvent" Name="AddZuluTimeEvent"
                       Visibility="public">
               <Description>Add event to scheduler that is called based on Zulu time.</Description>
               <Parameter Id="Smp.Services.IScheduler.AddZuluTimeEvent.return" Name="return"
                          Direction="return">
                  <Description>Event identifier that can be used to change or remove event.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddZuluTimeEvent.entryPoint" Name="entryPoint">
                  <Description>Entry point to call from event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddZuluTimeEvent.zuluTime" Name="zuluTime">
                  <Description>Absolute (Zulu) time when to trigger the event for the first time.
This must not be a time in the past.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddZuluTimeEvent.cycleTime" Name="cycleTime">
                  <Description>Duration between two triggers of the event.
When repeat is not zero, this must be a positive duration.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
                  <Default xsi:type="Types:DurationValue" Value="PT0S"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.AddZuluTimeEvent.repeat" Name="repeat">
                  <Description>Number of times the event shall be repeated, or 0 for a single event, or -1 for no limit.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
                  <Default xsi:type="Types:Int64Value" Value="0"/>
               </Parameter>
               <RaisedException xlink:title="InvalidCycleTime" xlink:href="#Smp.Services.InvalidCycleTime"/>
               <RaisedException xlink:title="InvalidEventTime" xlink:href="#Smp.Services.InvalidEventTime"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventSimulationTime"
                       Name="SetEventSimulationTime"
                       Visibility="public">
               <Description>Update when an existing simulation time event on the scheduler shall be triggered.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventSimulationTime.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventSimulationTime.simulationTime"
                          Name="simulationTime">
                  <Description>Duration from now when to trigger event.
If the simulation time is negative, the event will never be executed but instead be removed immediately from the scheduler.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventMissionTime" Name="SetEventMissionTime"
                       Visibility="public">
               <Description>Update when an existing mission time event on the scheduler shall be triggered.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventMissionTime.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventMissionTime.missionTime" Name="missionTime">
                  <Description>Absolute mission time when to trigger event.
If the mission time is before the current mission time, the event will never be executed but instead be removed immediately from the scheduler.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventEpochTime" Name="SetEventEpochTime"
                       Visibility="public">
               <Description>Update when an existing epoch time event on the scheduler (an event that has been registered using AddEpochTimeEvent()) shall be triggered.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventEpochTime.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventEpochTime.epochTime" Name="epochTime">
                  <Description>Epoch time when to trigger event.
If the epoch time is before the current epoch time, the event will never be executed but instead be removed immediately from the scheduler.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventZuluTime" Name="SetEventZuluTime"
                       Visibility="public">
               <Description>Update when an existing zulu time event on the scheduler shall be triggered.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventZuluTime.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventZuluTime.zuluTime" Name="zuluTime">
                  <Description>Absolute (Zulu) time when to trigger event.
If the zulu time is before the current zulu time, the event will never be executed but instead be removed immediately from the scheduler.</Description>
                  <Type xlink:title="DateTime" xlink:href="#Smp.DateTime"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventCycleTime" Name="SetEventCycleTime"
                       Visibility="public">
               <Description>Update cycle time of an existing event on the scheduler.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventCycleTime.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventCycleTime.cycleTime" Name="cycleTime">
                  <Description>Duration between two triggers of the event.
For a cyclic event, this needs to be a positive duration. Otherwise, an exception of type InvalidCycleTime is thrown.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
               <RaisedException xlink:title="InvalidCycleTime" xlink:href="#Smp.Services.InvalidCycleTime"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.SetEventRepeat" Name="SetEventRepeat"
                       Visibility="public">
               <Description>Update the repeat counter of an existing event on the scheduler.</Description>
               <Parameter Id="Smp.Services.IScheduler.SetEventRepeat.event" Name="event">
                  <Description>Identifier of event to modify.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IScheduler.SetEventRepeat.repeat" Name="repeat">
                  <Description>Number of times the event shall be repeated, or 0 for a single event, or -1 for no limit.
An event with a repeat different from 0 is called cyclic. For such an event, a positive cycle time has to be defined before. Otherwise, an exception of type InvalidCycleTime is thrown.</Description>
                  <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.RemoveEvent" Name="RemoveEvent" Visibility="public">
               <Description>Remove an event from the scheduler.</Description>
               <Parameter Id="Smp.Services.IScheduler.RemoveEvent.event" Name="event">
                  <Description>Event identifier of the event to remove.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.GetCurrentEventId" Name="GetCurrentEventId"
                       Visibility="public">
               <Description>Return the ID of the event currently executed by the scheduler. If not event is executed, this function returns -1.</Description>
               <Parameter Id="Smp.Services.IScheduler.GetCurrentEventId.return" Name="return"
                          Direction="return">
                  <Description>Event Id or -1 if no event is being executed.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.IScheduler.GetNextScheduledEventTime"
                       Name="GetNextScheduledEventTime"
                       Visibility="public">
               <Description>Get the time of next scheduled Event.</Description>
               <Parameter Id="Smp.Services.IScheduler.GetNextScheduledEventTime.return" Name="return"
                          Direction="return">
                  <Description>Time of the next event on the scheduler.</Description>
                  <Type xlink:title="Duration" xlink:href="#Smp.Duration"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
         <Type xsi:type="Types:Integer" Id="Smp.Services.EventId" Name="EventId"
               Visibility="public"
               Uuid="d54589a4-e618-11dc-ab64-bf8df6d7b83a">
            <Description>Identifier of global event of scheduler or event manager service.</Description>
            <PrimitiveType xlink:title="Int64" xlink:href="#Smp.Int64"/>
         </Type>
         <Type xsi:type="Types:Exception" Id="Smp.Services.InvalidEventId"
               Name="InvalidEventId"
               Visibility="public"
               Uuid="d54f26d2-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This exception is raised when an invalid event id is provided, e.g. when calling Subscribe(), Unsubscribe() or Emit() of the Event Manager (using an invalid global event id), or when calling SetEventSimulationTime(), SetEventMissionTime(), SetEventEpochTime(), SetEventZuluTime(), SetEventCycleTime(), SetEventCount() or RemoveEvent() of the Scheduler (using an invalid scheduler event id).</Description>
            <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
            <Operation Id="Smp.Services.InvalidEventId.GetInvalidEventId" Name="GetInvalidEventId"
                       Visibility="public">
               <Description>Get the invalid event identifier.</Description>
               <Parameter Id="Smp.Services.InvalidEventId.GetInvalidEventId.return" Name="return"
                          Direction="return">
                  <Description>Invalid event identifier.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
            </Operation>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.IEventManager"
               Name="IEventManager"
               Visibility="public"
               Uuid="d54a4520-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface is implemented by the Event Manager Service.</Description>
            <Constant Id="Smp.Services.IEventManager.SMP_EventManager" Name="SMP_EventManager"
                      Visibility="public">
               <Description>Name of the EventManager service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="EventManager"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveConnectingId"
                      Name="SMP_LeaveConnectingId"
                      Visibility="public">
               <Description>This event is raised when leaving the Connecting state with an automatic state transition to Initializing state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="1"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveConnecting" Name="SMP_LeaveConnecting"
                      Visibility="public">
               <Description>Leave Connecting state.
When leaving the Connecting state with an automatic state transition to Initializing state</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveConnecting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterInitialisingId"
                      Name="SMP_EnterInitialisingId"
                      Visibility="public">
               <Description>This event is raised when entering the Initialising state with an automatic state transition from Connecting state, or with the Initialise() state transition. </Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="2"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterInitialising"
                      Name="SMP_EnterInitialising"
                      Visibility="public">
               <Description>Enter Initialising state.
When entering the Initialising state with an automatic state transition from Connecting state, or with the Initialise() state transition.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterInitialising"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveInitialisingId"
                      Name="SMP_LeaveInitialisingId"
                      Visibility="public">
               <Description>This event is raised when leaving the Initialising state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="3"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveInitialising"
                      Name="SMP_LeaveInitialising"
                      Visibility="public">
               <Description>Leave Initialising state.
When leaving the Initialising state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveInitialising"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterStandbyId" Name="SMP_EnterStandbyId"
                      Visibility="public">
               <Description>This event is raised when entering the Standby state with an automatic state transition from Initialising, Storing or Restoring state, or with the Hold() state transition command from Executing state. </Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="4"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterStandby" Name="SMP_EnterStandby"
                      Visibility="public">
               <Description>Enter Standby state.
When entering the Standby state with an automatic state transition from Initialising, Storing or Restoring state, or the Hold() state transition command from Executing state.
</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterStandby"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveStandbyId" Name="SMP_LeaveStandbyId"
                      Visibility="public">
               <Description>This event is raised when leaving the Standby state with the Run() state transition command to Executing state, with the Store() state transition command to Storing state, with the Restore() state transition command to Restoring state, or with the Initialise() state transition command to Initialising state. </Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="5"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveStandby" Name="SMP_LeaveStandby"
                      Visibility="public">
               <Description>Leave Standby state.
When leaving the Standby state with
&lt;ul&gt;
&lt;li&gt;the Run() state transition command to Executing state,
&lt;li&gt;the Store() state transition command to Storing state, 
&lt;li&gt;the Restore() state transition command to Restoring state,
&lt;li&gt;the Initialise() state transition command to Initialising state.
&lt;/ul&gt;
</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveStandby"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterExecutingId"
                      Name="SMP_EnterExecutingId"
                      Visibility="public">
               <Description>This event is raised when entering the Executing state with the Run() state transition command from Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="6"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterExecuting" Name="SMP_EnterExecuting"
                      Visibility="public">
               <Description>Enter Executing state.
When entering the Executing state with the Run() state transition command from Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterExecuting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveExecutingId"
                      Name="SMP_LeaveExecutingId"
                      Visibility="public">
               <Description>This event is raised when leaving the Executing state with the Hold() state transition command to Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="7"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveExecuting" Name="SMP_LeaveExecuting"
                      Visibility="public">
               <Description>Leave Executing state.
When leaving the Executing state with the Hold() state transition command to Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveExecuting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterStoringId" Name="SMP_EnterStoringId"
                      Visibility="public">
               <Description>This event is raised when entering the Storing state with the Store() state transition command from Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="8"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterStoring" Name="SMP_EnterStoring"
                      Visibility="public">
               <Description>Enter Storing state.
When entering the Storing state with the Store() state transition command from Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterStoring"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveStoringId" Name="SMP_LeaveStoringId"
                      Visibility="public">
               <Description>This event is raised when leaving the Storing state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="9"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveStoring" Name="SMP_LeaveStoring"
                      Visibility="public">
               <Description>Leave Storing state.
When leaving the Storing state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveStoring"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterRestoringId"
                      Name="SMP_EnterRestoringId"
                      Visibility="public">
               <Description>This event is raised when entering the Restoring state with the Restore() state transition command from Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="10"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterRestoring" Name="SMP_EnterRestoring"
                      Visibility="public">
               <Description>Enter Restoring state.
When entering the Restoring state with the Restore() state transition command from Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterRestoring"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveRestoringId"
                      Name="SMP_LeaveRestoringId"
                      Visibility="public">
               <Description>This event is raised when leaving the Restoring state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="11"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveRestoring" Name="SMP_LeaveRestoring"
                      Visibility="public">
               <Description>Leave Restoring state.
When leaving the Restoring state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveRestoring"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterExitingId" Name="SMP_EnterExitingId"
                      Visibility="public">
               <Description>This event is raised when entering the Exiting state with the Exit() state transition command from Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="12"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterExiting" Name="SMP_EnterExiting"
                      Visibility="public">
               <Description>Enter Exiting state.
When entering the Exiting state with the Exit() state transition command from Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterExiting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterAbortingId" Name="SMP_EnterAbortingId"
                      Visibility="public">
               <Description>This event is raised when entering the Aborting state with the Abort() state transition command from any other state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="13"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterAborting" Name="SMP_EnterAborting"
                      Visibility="public">
               <Description>Enter Aborting state.
When entering the Aborting state with the Abort() state transition command from any other state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterAborting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EpochTimeChangedId"
                      Name="SMP_EpochTimeChangedId"
                      Visibility="public">
               <Description>This event is raised when changing the epoch time with the SetEpochTime() method of the time keeper service.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="14"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EpochTimeChanged"
                      Name="SMP_EpochTimeChanged"
                      Visibility="public">
               <Description>Epoch Time has changed.
When changing the epoch time with the SetEpochTime() method of the time keeper service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EpochTimeChanged"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_MissionTimeChangedId"
                      Name="SMP_MissionTimeChangedId"
                      Visibility="public">
               <Description>This event is raised when changing the mission time with one of the SetMissionTime() and SetMissionStart() methods of the time keeper service. </Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="15"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_MissionTimeChanged"
                      Name="SMP_MissionTimeChanged"
                      Visibility="public">
               <Description>Mission time has changed.
When changing the mission time with one of the SetMissionTime() and SetMissionStartTime() methods of the time keeper service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_MissionTimeChanged"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterReconnectingId"
                      Name="SMP_EnterReconnectingId"
                      Visibility="public">
               <Description>This event is raised when entering the Reconnecting state with the Reconnect() state transition from Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="16"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_EnterReconnecting"
                      Name="SMP_EnterReconnecting"
                      Visibility="public">
               <Description>Enter Reconnecting state.
When entering the Reconnecting state with the Reconnect() state transition from Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_EnterReconnecting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveReconnectingId"
                      Name="SMP_LeaveReconnectingId"
                      Visibility="public">
               <Description>This event is raised when leaving the Reconnecting state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="17"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_LeaveReconnecting"
                      Name="SMP_LeaveReconnecting"
                      Visibility="public">
               <Description>Leave Reconnecting state.
When leaving the Reconnecting state with an automatic state transition to Standby state.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_LeaveReconnecting"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_PreSimTimeChangeId"
                      Name="SMP_PreSimTimeChangeId"
                      Visibility="public">
               <Description>This event is raised before the Time Keeper updates the Simulation Time.</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="18"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_PreSimTimeChange"
                      Name="SMP_PreSimTimeChange"
                      Visibility="public">
               <Description>Before changing the Simulation Time.
When all events have been executed by the Scheduler for a specific Simulation Time, but before the TimeKeeper changes the Simulation time to the time of next event.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_PreSimTimeChange"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_PostSimTimeChangeId"
                      Name="SMP_PostSimTimeChangeId"
                      Visibility="public">
               <Description>This event is raised after the simulation time has been changed by the Time Keeper, but before an event has been executed by the Scheduler.
</Description>
               <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               <Value xsi:type="Types:Int64Value" Value="19"/>
            </Constant>
            <Constant Id="Smp.Services.IEventManager.SMP_PostSimTimeChange"
                      Name="SMP_PostSimTimeChange"
                      Visibility="public">
               <Description>After changing the Simulation Time.
When the simulation time has been changed by the Time Keeper, but before any events have been executed by the Scheduler.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="SMP_PostSimTimeChange"/>
            </Constant>
            <Operation Id="Smp.Services.IEventManager.QueryEventId" Name="QueryEventId"
                       Visibility="public">
               <Description>Get unique event identifier for an event name.</Description>
               <Parameter Id="Smp.Services.IEventManager.QueryEventId.return" Name="return"
                          Direction="return">
                  <Description>Event identifier for global event with given name.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IEventManager.QueryEventId.eventName" Name="eventName">
                  <Description>Name of the global event.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventName" xlink:href="#Smp.Services.InvalidEventName"/>
            </Operation>
            <Operation Id="Smp.Services.IEventManager.Subscribe" Name="Subscribe" Visibility="public">
               <Description>Subscribe entry point to a global event.</Description>
               <Parameter Id="Smp.Services.IEventManager.Subscribe.event" Name="event">
                  <Description>Event identifier of global event to subscribe to.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IEventManager.Subscribe.entryPoint" Name="entryPoint">
                  <Description>Entry point to subscribe to global event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
               <RaisedException xlink:title="EntryPointAlreadySubscribed"
                                xlink:href="#Smp.Services.EntryPointAlreadySubscribed"/>
            </Operation>
            <Operation Id="Smp.Services.IEventManager.Unsubscribe" Name="Unsubscribe"
                       Visibility="public">
               <Description>Unsubscribe entry point from a global event.</Description>
               <Parameter Id="Smp.Services.IEventManager.Unsubscribe.event" Name="event">
                  <Description>Event identifier of global event to unsubscribe from.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IEventManager.Unsubscribe.entryPoint" Name="entryPoint">
                  <Description>Entry point to unsubscribe from global event.</Description>
                  <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
               <RaisedException xlink:title="EntryPointNotSubscribed"
                                xlink:href="#Smp.Services.EntryPointNotSubscribed"/>
            </Operation>
            <Operation Id="Smp.Services.IEventManager.Emit" Name="Emit" Visibility="public">
               <Description>Emit a global event.</Description>
               <Parameter Id="Smp.Services.IEventManager.Emit.event" Name="event">
                  <Description>Event identifier of global event to emit.</Description>
                  <Type xlink:title="EventId" xlink:href="#Smp.Services.EventId"/>
               </Parameter>
               <Parameter Id="Smp.Services.IEventManager.Emit.synchronous" Name="synchronous">
                  <Description>Flag whether to emit the given event synchronously (the default) or asynchronously.</Description>
                  <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
                  <Default xsi:type="Types:BoolValue" Value="true"/>
               </Parameter>
               <RaisedException xlink:title="InvalidEventId" xlink:href="#Smp.Services.InvalidEventId"/>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
         <Type xsi:type="Catalogue:Interface" Id="Smp.Services.IResolver" Name="IResolver"
               Visibility="public"
               Uuid="d54f26bd-e618-11dc-ab64-bf8df6d7b83a">
            <Description>This interface gives access to the Resolver Service.</Description>
            <Constant Id="Smp.Services.IResolver.SMP_Resolver" Name="SMP_Resolver"
                      Visibility="public">
               <Description>Name of the Resolver service.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               <Value xsi:type="Types:String8Value" Value="Resolver"/>
            </Constant>
            <Operation Id="Smp.Services.IResolver.ResolveAbsolute" Name="ResolveAbsolute"
                       Visibility="public">
               <Description>Resolve reference to an object via absolute path.</Description>
               <Parameter Id="Smp.Services.IResolver.ResolveAbsolute.return" Name="return"
                          Direction="return">
                  <Description>Object identified by path, or null if no object with the given path could be found.</Description>
                  <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
               </Parameter>
               <Parameter Id="Smp.Services.IResolver.ResolveAbsolute.absolutePath" Name="absolutePath">
                  <Description>Absolute path to object in simulation.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
            </Operation>
            <Operation Id="Smp.Services.IResolver.ResolveRelative" Name="ResolveRelative"
                       Visibility="public">
               <Description>Resolve reference to an object via relative path.</Description>
               <Parameter Id="Smp.Services.IResolver.ResolveRelative.return" Name="return"
                          Direction="return">
                  <Description>Component identified by path, or null if no component with the given path could be found.</Description>
                  <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
               </Parameter>
               <Parameter Id="Smp.Services.IResolver.ResolveRelative.relativePath" Name="relativePath">
                  <Description>Relative path to object in simulation.</Description>
                  <Type xlink:title="String8" xlink:href="#Smp.String8"/>
               </Parameter>
               <Parameter Id="Smp.Services.IResolver.ResolveRelative.sender" Name="sender">
                  <Description>Component that asks for resolving the reference.</Description>
                  <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
               </Parameter>
            </Operation>
            <Base xlink:title="IService" xlink:href="#Smp.IService"/>
         </Type>
      </Namespace>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Char8" Name="Char8" Visibility="public"
            Uuid="00000000-0000-0000-2020-204368617238">
         <Description>8 bit character</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.String8" Name="String8"
            Visibility="public"
            Uuid="00000000-0000-0000-2053-7472696e6738">
         <Description>8 bit character string</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Float32" Name="Float32"
            Visibility="public"
            Uuid="00000000-0000-0000-2046-6c6f61723332">
         <Description>32 bit single-precision float</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Float64" Name="Float64"
            Visibility="public"
            Uuid="00000000-0000-0000-2046-6c6f61723634">
         <Description>64 bit double-precision float</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Int8" Name="Int8" Visibility="public"
            Uuid="00000000-0000-0000-2020-2020496e7238">
         <Description>8 bit   signed integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.UInt8" Name="UInt8" Visibility="public"
            Uuid="00000000-0000-0000-2020-2055496e7238">
         <Description>8 bit unsigned integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Int16" Name="Int16" Visibility="public"
            Uuid="00000000-0000-0000-2020-20496e723136">
         <Description>16 bit   signed integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.UInt16" Name="UInt16"
            Visibility="public"
            Uuid="00000000-0000-0000-2020-55496e723136">
         <Description>16 bit unsigned integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Int32" Name="Int32" Visibility="public"
            Uuid="00000000-0000-0000-2020-20496e723332">
         <Description>32 bit   signed integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.UInt32" Name="UInt32"
            Visibility="public"
            Uuid="00000000-0000-0000-2020-55496e723332">
         <Description>32 bit unsigned integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Int64" Name="Int64" Visibility="public"
            Uuid="00000000-0000-0000-2020-20496e723634">
         <Description>64 bit   signed integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.UInt64" Name="UInt64"
            Visibility="public"
            Uuid="00000000-0000-0000-2020-55496e723634">
         <Description>64 bit unsigned integer</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Bool" Name="Bool" Visibility="public"
            Uuid="00000000-0000-0000-2020-2020426f6f6c">
         <Description>boolean with true or false</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.DateTime" Name="DateTime"
            Visibility="public"
            Uuid="00000000-0000-0000-4461-746554696d65">
         <Description>point in time in nanoseconds
relative to MJD 2000+0.5</Description>
      </Type>
      <Type xsi:type="Types:PrimitiveType" Id="Smp.Duration" Name="Duration"
            Visibility="public"
            Uuid="00000000-0000-0000-4475-726174696f6e">
         <Description>duration in nanoseconds
</Description>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.ICollection" Name="ICollection"
            Visibility="public"
            Uuid="89e86764-b214-11e9-9160-512f4ecdaa5f">
         <Description>Interface for a collection.
A collection allows querying for the contained elements.
A collection must enforce uniqueness of the names of the contained elements.
Elements in the collection can be queried by name and by position.
The query by position must always return the elements based on order of insertion.</Description>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IDataflowField" Name="IDataflowField"
            Visibility="public"
            Uuid="9b7c7c8f-cc52-11e6-a1c3-13e36fcced83">
         <Description>This interface is implemented by a Field that can take part in direct inter-component data flow.</Description>
         <Operation Id="Smp.IDataflowField.Connect" Name="Connect" Visibility="public">
            <Description>Connect this field to a target field for direct data flow.
As the Push() operation only requires to set a value, the target field can be any field (it does not need to be of type IDataflowField).</Description>
            <Parameter Id="Smp.IDataflowField.Connect.target" Name="target" Direction="inout">
               <Description>Target field to connect to. The field type must be compatible.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <RaisedException xlink:title="InvalidTarget" xlink:href="#Smp.InvalidTarget"/>
            <RaisedException xlink:title="FieldAlreadyConnected" xlink:href="#Smp.FieldAlreadyConnected"/>
         </Operation>
         <Operation Id="Smp.IDataflowField.Push" Name="Push" Visibility="public">
            <Description>Push the current field value to all connected target fields.</Description>
         </Operation>
         <Base xlink:title="IField" xlink:href="#Smp.IField"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IFailure" Name="IFailure"
            Visibility="public"
            Uuid="d572db2e-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a failure.</Description>
         <Operation Id="Smp.IFailure.Fail" Name="Fail" Visibility="public">
            <Description>Sets the state of the failure to failed.</Description>
         </Operation>
         <Operation Id="Smp.IFailure.Unfail" Name="Unfail" Visibility="public">
            <Description>Sets the state of the failure to unfailed.</Description>
         </Operation>
         <Operation Id="Smp.IFailure.IsFailed" Name="IsFailed" Visibility="public">
            <Description>Returns whether the failure&apos;s state is set to failed.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFailure.IsFailed.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFailure.IsFailed.return" Name="return" Direction="return">
               <Description>Returns true if the failure state is Failed, false otherwise.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IPersist" xlink:href="#Smp.IPersist"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IFallibleModel" Name="IFallibleModel"
            Visibility="public"
            Uuid="d572db1a-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a fallible model that exposes its failure state and a collection of failures.</Description>
         <Operation Id="Smp.IFallibleModel.IsFailed" Name="IsFailed" Visibility="public">
            <Description>Query for whether the model is failed. A model is failed when at least one of its failures is failed.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFallibleModel.IsFailed.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFallibleModel.IsFailed.return" Name="return" Direction="return">
               <Description>Whether the model is failed or not.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IFallibleModel.GetFailures" Name="GetFailures" Visibility="public">
            <Description>Query for the collection of all failures.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFallibleModel.GetFailures.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFallibleModel.GetFailures.return" Name="return" Direction="return">
               <Description>Failure collection of the model.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IFallibleModel.GetFailures.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="FailureCollection" xlink:href="#Smp.FailureCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IFallibleModel.GetFailure" Name="GetFailure" Visibility="public">
            <Description>Get a failure by name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFallibleModel.GetFailure.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFallibleModel.GetFailure.name" Name="name">
               <Description>Name of the failure to return.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IFallibleModel.GetFailure.return" Name="return" Direction="return">
               <Description>Failure queried for by name, or null if no failure with this name exists.</Description>
               <Type xlink:title="IFailure" xlink:href="#Smp.IFailure"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IModel" xlink:href="#Smp.IModel"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.ILinkingComponent"
            Name="ILinkingComponent"
            Visibility="public"
            Uuid="d5752575-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a component which can hold links to other components.</Description>
         <Operation Id="Smp.ILinkingComponent.RemoveLinks" Name="RemoveLinks" Visibility="public">
            <Description>Asks a component to remove all its links to the given target component.
After this method has been called, the component must not try to access the given target component anymore.</Description>
            <Parameter Id="Smp.ILinkingComponent.RemoveLinks.target" Name="target">
               <Description>Target component to which all links shall be removed.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.ILinkingComponent.RemoveLinks.target.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IOperation" Name="IOperation"
            Visibility="public"
            Uuid="0dedc888-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This interface describes a published operation.</Description>
         <Operation Id="Smp.IOperation.GetParameters" Name="GetParameters" Visibility="public">
            <Description>Provides the collection of parameters that will end-up in the request object of CreateRequest(), i.e. all parameter that are not of direction return. This collection is ordered the same way as the parameters in the request object, and may be empty.
The optional return parameter is returned via GetReturnParameter.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IOperation.GetParameters.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IOperation.GetParameters.return" Name="return" Direction="return">
               <Description>Collection of parameters, in the same order as in the request object created by CreateRequest().</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IOperation.GetParameters.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="ParameterCollection" xlink:href="#Smp.ParameterCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IOperation.GetParameter" Name="GetParameter" Visibility="public">
            <Description>Return a parameter by name. This works both for parameters in the collection of GetParameters(), and for the optional return parameter.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IOperation.GetParameter.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IOperation.GetParameter.name" Name="name">
               <Description>Parameter name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IOperation.GetParameter.return" Name="return" Direction="return">
               <Description>Parameter object, or null if no parameter with the given name exists.</Description>
               <Type xlink:title="IParameter" xlink:href="#Smp.IParameter"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IOperation.GetReturnParameter" Name="GetReturnParameter"
                    Visibility="public">
            <Description>This operation returns the return parameter, or nullptr if no return parameter exists (for a void operation).</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IOperation.GetReturnParameter.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IOperation.GetReturnParameter.return" Name="return" Direction="return">
               <Description>The return parameter of the operation, or nullptr for a void operation.</Description>
               <Type xlink:title="IParameter" xlink:href="#Smp.IParameter"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IOperation.GetView" Name="GetView" Visibility="public">
            <Description>Provides the view kind of the operation.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IOperation.GetView.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IOperation.GetView.return" Name="return" Direction="return">
               <Description>View kind of the operation.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IOperation.CreateRequest" Name="CreateRequest" Visibility="public">
            <Description>Return a request object for the operation that describes the parameters and the return value.</Description>
            <Parameter Id="Smp.IOperation.CreateRequest.return" Name="return" Direction="return">
               <Description>Request object for operation, or null if the operation does not support dynamic invocation.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IOperation.Invoke" Name="Invoke" Visibility="public">
            <Description>Dynamically invoke the operation using a request object that has been created and filled with parameter values by the caller.</Description>
            <Parameter Id="Smp.IOperation.Invoke.request" Name="request" Direction="inout">
               <Description>Request object to invoke.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
            <RaisedException xlink:title="InvalidParameterCount" xlink:href="#Smp.InvalidParameterCount"/>
            <RaisedException xlink:title="InvalidOperationName" xlink:href="#Smp.InvalidOperationName"/>
            <RaisedException xlink:title="InvalidParameterType" xlink:href="#Smp.InvalidParameterType"/>
         </Operation>
         <Operation Id="Smp.IOperation.DeleteRequest" Name="DeleteRequest" Visibility="public">
            <Description>Destroy a request object that has been created with the CreateRequest() method before.</Description>
            <Parameter Id="Smp.IOperation.DeleteRequest.request" Name="request" Direction="inout">
               <Description>Request object to destroy.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IParameter" Name="IParameter"
            Visibility="public"
            Uuid="0dedc8a7-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This interface describes a parameter of a published operation.</Description>
         <Operation Id="Smp.IParameter.GetType" Name="GetType" Visibility="public">
            <Description>Provides the type of the parameter.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IParameter.GetType.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IParameter.GetType.return" Name="return" Direction="return">
               <Description>Type of the parameter.</Description>
               <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IParameter.GetDirection" Name="GetDirection" Visibility="public">
            <Description>Provides the parameter direction kind of the parameter.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IParameter.GetDirection.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IParameter.GetDirection.return" Name="return" Direction="return">
               <Description>Parameter direction kind of the parameter.</Description>
               <Type xlink:title="ParameterDirectionKind"
                     xlink:href="#Smp.Publication.ParameterDirectionKind"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IProperty" Name="IProperty"
            Visibility="public"
            Uuid="0dedc891-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This interface describes a published property.</Description>
         <Operation Id="Smp.IProperty.GetType" Name="GetType" Visibility="public">
            <Description>Provides the type of the property.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IProperty.GetType.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IProperty.GetType.return" Name="return" Direction="return">
               <Description>Type of the property.</Description>
               <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IProperty.GetAccess" Name="GetAccess" Visibility="public">
            <Description>Provides the access kind of the property.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IProperty.GetAccess.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IProperty.GetAccess.return" Name="return" Direction="return">
               <Description>Access kind of the property.</Description>
               <Type xlink:title="AccessKind" xlink:href="#Smp.AccessKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IProperty.GetView" Name="GetView" Visibility="public">
            <Description>Provides the view kind of the property.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IProperty.GetView.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IProperty.GetView.return" Name="return" Direction="return">
               <Description>View kind of the property.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IProperty.GetValue" Name="GetValue" Visibility="public">
            <Description>Provides the value of the property.
Throws InvalidAccess if the property is Write Only.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IProperty.GetValue.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IProperty.GetValue.return" Name="return" Direction="return">
               <Description>The current value of the property.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IProperty.SetValue" Name="SetValue" Visibility="public">
            <Description>Sets the value of the property.
Throws InvalidAccess if the property is Read Only.</Description>
            <Parameter Id="Smp.IProperty.SetValue.value" Name="value">
               <Description>New value of the property.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.ISimpleArrayField"
            Name="ISimpleArrayField"
            Visibility="public"
            Uuid="b0b7564c-40ba-11e8-b859-115ced83748f">
         <Description>Interface to an array where each array item is of a simple type.</Description>
         <Operation Id="Smp.ISimpleArrayField.GetSize" Name="GetSize" Visibility="public">
            <Description>Get the size (number of array items) of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimpleArrayField.GetSize.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimpleArrayField.GetSize.return" Name="return" Direction="return">
               <Description>Size (number of array items) of the field.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimpleArrayField.GetValue" Name="GetValue" Visibility="public">
            <Description>Get a value from a specific index of the array field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimpleArrayField.GetValue.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimpleArrayField.GetValue.return" Name="return" Direction="return">
               <Description>Value from given index.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <Parameter Id="Smp.ISimpleArrayField.GetValue.index" Name="index">
               <Description>Index of value to get.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
            <RaisedException xlink:title="InvalidArrayIndex" xlink:href="#Smp.InvalidArrayIndex"/>
         </Operation>
         <Operation Id="Smp.ISimpleArrayField.SetValue" Name="SetValue" Visibility="public">
            <Description>Set a value at given index of the array field.</Description>
            <Parameter Id="Smp.ISimpleArrayField.SetValue.index" Name="index">
               <Description>Index of value to set.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
            <Parameter Id="Smp.ISimpleArrayField.SetValue.value" Name="value">
               <Description>Value to set at given index.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.ISimpleArrayField.SetValue.value.ByReference"
                         Name="ByReference">
                  <Type xlink:title="ByReference" xlink:href="#Smp.Attributes.ByReference"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="InvalidFieldValue" xlink:href="#Smp.InvalidFieldValue"/>
            <RaisedException xlink:title="InvalidArrayIndex" xlink:href="#Smp.InvalidArrayIndex"/>
         </Operation>
         <Operation Id="Smp.ISimpleArrayField.GetValues" Name="GetValues" Visibility="public">
            <Description>Get all values of the array field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimpleArrayField.GetValues.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimpleArrayField.GetValues.length" Name="length">
               <Description>Size of given values array.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
            <Parameter Id="Smp.ISimpleArrayField.GetValues.values" Name="values" Direction="inout">
               <Description>Pre-allocated array of values to store result to.</Description>
               <Type xlink:title="AnySimpleArray" xlink:href="#Smp.AnySimpleArray"/>
            </Parameter>
            <RaisedException xlink:title="InvalidArraySize" xlink:href="#Smp.InvalidArraySize"/>
         </Operation>
         <Operation Id="Smp.ISimpleArrayField.SetValues" Name="SetValues" Visibility="public">
            <Description>Set all values of the array field.</Description>
            <Parameter Id="Smp.ISimpleArrayField.SetValues.length" Name="length">
               <Description>Size of given values array.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
            <Parameter Id="Smp.ISimpleArrayField.SetValues.values" Name="values">
               <Description>Array of values to store in array field.</Description>
               <Type xlink:title="AnySimpleArray" xlink:href="#Smp.AnySimpleArray"/>
            </Parameter>
            <RaisedException xlink:title="InvalidArraySize" xlink:href="#Smp.InvalidArraySize"/>
            <RaisedException xlink:title="InvalidArrayValue" xlink:href="#Smp.InvalidArrayValue"/>
         </Operation>
         <Base xlink:title="IField" xlink:href="#Smp.IField"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IStructureField" Name="IStructureField"
            Visibility="public"
            Uuid="9b7c7cae-cc52-11e6-a1c3-13e36fcced83">
         <Description>Interface of a structure field.</Description>
         <Operation Id="Smp.IStructureField.GetFields" Name="GetFields" Visibility="public">
            <Description>Return the collection of fields of the structure.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStructureField.GetFields.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStructureField.GetFields.return" Name="return" Direction="return">
               <Description>Collection of fields of the structure.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IStructureField.GetFields.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="FieldCollection" xlink:href="#Smp.FieldCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IStructureField.GetField" Name="GetField" Visibility="public">
            <Description>Return a field by name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStructureField.GetField.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStructureField.GetField.return" Name="return" Direction="return">
               <Description>Field object, or null if no field with the given name exists.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <Parameter Id="Smp.IStructureField.GetField.name" Name="name">
               <Description>Name of the field to retrieve.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IField" xlink:href="#Smp.IField"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.CannotDelete" Name="CannotDelete"
            Visibility="public"
            Uuid="0dedc8c1-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This exception is thrown when trying to delete a component from a container when the number of contained components is lower than or equal to the Lower limit.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.CannotDelete.GetContainerName" Name="GetContainerName"
                    Visibility="public">
            <Description>Get the name of the container.</Description>
            <Parameter Id="Smp.CannotDelete.GetContainerName.return" Name="return" Direction="return">
               <Description>Name of the container.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.CannotDelete.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Get the Component that could not be deleted.</Description>
            <Parameter Id="Smp.CannotDelete.GetComponent.return" Name="return" Direction="return">
               <Description>Component that could not be deleted.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.CannotDelete.GetComponent.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.CannotDelete.GetLowerLimit" Name="GetLowerLimit" Visibility="public">
            <Description>Get the lower limit of the container.</Description>
            <Parameter Id="Smp.CannotDelete.GetLowerLimit.return" Name="return" Direction="return">
               <Description>Lower limit of the container.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.CannotRemove" Name="CannotRemove"
            Visibility="public"
            Uuid="d53e5dda-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is thrown when trying to remove a component from a reference when the number of referenced components is lower than or equal to the Lower limit.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.CannotRemove.GetReferenceName" Name="GetReferenceName"
                    Visibility="public">
            <Description>Get the name of the reference.</Description>
            <Parameter Id="Smp.CannotRemove.GetReferenceName.return" Name="return" Direction="return">
               <Description>Name of the reference.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.CannotRemove.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Get the Component that could not be removed.</Description>
            <Parameter Id="Smp.CannotRemove.GetComponent.return" Name="return" Direction="return">
               <Description>Component that could not be removed.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.CannotRemove.GetComponent.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.CannotRemove.GetLowerLimit" Name="GetLowerLimit" Visibility="public">
            <Description>Get the lower limit of the reference.</Description>
            <Parameter Id="Smp.CannotRemove.GetLowerLimit.return" Name="return" Direction="return">
               <Description>Lower limit of the reference.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.CannotRestore" Name="CannotRestore"
            Visibility="public"
            Uuid="d55fc866-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when the content of the storage reader passed to the Restore() method contains invalid data. </Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.CannotStore" Name="CannotStore"
            Visibility="public"
            Uuid="d55fc86c-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when the component cannot store its data to the storage writer given to the Store() method.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.DuplicateUuid" Name="DuplicateUuid"
            Visibility="public"
            Uuid="d540cf46-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to register a factory under a Uuid that has already been used to register another (or the same) factory.This would lead to duplicate implementation Uuids.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.DuplicateUuid.GetOldName" Name="GetOldName" Visibility="public">
            <Description>Get the name of factory that tried to register under this Uuid.</Description>
            <Parameter Id="Smp.DuplicateUuid.GetOldName.return" Name="return" Direction="return">
               <Description>Name of factory that tried to register under this Uuid.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.DuplicateUuid.GetNewName" Name="GetNewName" Visibility="public">
            <Description>Get the name of factory that tried to register under this Uuid.</Description>
            <Parameter Id="Smp.DuplicateUuid.GetNewName.return" Name="return" Direction="return">
               <Description>Name of factory that tried to register under this Uuid.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.EventSinkAlreadySubscribed"
            Name="EventSinkAlreadySubscribed"
            Visibility="public"
            Uuid="d55d57ad-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to subscribe an event sink to an event source that is already subscribed.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.EventSinkAlreadySubscribed.GetEventSink" Name="GetEventSink"
                    Visibility="public">
            <Description>Returns the event sink that the event source has already been subscribed to.</Description>
            <Parameter Id="Smp.EventSinkAlreadySubscribed.GetEventSink.return" Name="return"
                       Direction="return">
               <Description>Event sink that the event source has already been subscribed to.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.EventSinkAlreadySubscribed.GetEventSink.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.EventSinkAlreadySubscribed.GetEventSource" Name="GetEventSource"
                    Visibility="public">
            <Description>Returns the event source that is already subscribed to the event sink.</Description>
            <Parameter Id="Smp.EventSinkAlreadySubscribed.GetEventSource.return" Name="return"
                       Direction="return">
               <Description>Event source that is already subscribed to the event sink.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.EventSinkAlreadySubscribed.GetEventSource.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSource" xlink:href="#Smp.IEventSource"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.EventSinkNotSubscribed"
            Name="EventSinkNotSubscribed"
            Visibility="public"
            Uuid="d55d57b4-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to unsubscribe an event sink from an event source that is not subscribed to it.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.EventSinkNotSubscribed.GetEventSource" Name="GetEventSource"
                    Visibility="public">
            <Description>Returns the event source that is not subscribed to the event sink.</Description>
            <Parameter Id="Smp.EventSinkNotSubscribed.GetEventSource.return" Name="return"
                       Direction="return">
               <Description>Event source that is not subscribed to the event sink.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.EventSinkNotSubscribed.GetEventSource.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSource" xlink:href="#Smp.IEventSource"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.EventSinkNotSubscribed.GetEventSink" Name="GetEventSink"
                    Visibility="public">
            <Description>Returns the event sink that the event source has not been subscribed to.</Description>
            <Parameter Id="Smp.EventSinkNotSubscribed.GetEventSink.return" Name="return"
                       Direction="return">
               <Description>Event sink that the event source has not been subscribed to.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.EventSinkNotSubscribed.GetEventSink.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.FieldAlreadyConnected"
            Name="FieldAlreadyConnected"
            Visibility="public"
            Uuid="9b7c7c9d-cc52-11e6-a1c3-13e36fcced83">
         <Description>This exception is raised when trying to connect a target field to a data flow field that is already connected.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.FieldAlreadyConnected.GetSource" Name="GetSource" Visibility="public">
            <Description>Get the field for which the Connect operation was called.</Description>
            <Parameter Id="Smp.FieldAlreadyConnected.GetSource.return" Name="return"
                       Direction="return">
               <Description>Field for which the Connect operation was called</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.FieldAlreadyConnected.GetSource.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IDataflowField" xlink:href="#Smp.IDataflowField"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.FieldAlreadyConnected.GetTarget" Name="GetTarget" Visibility="public">
            <Description>Get the target field that was passed to the Connect operation.</Description>
            <Parameter Id="Smp.FieldAlreadyConnected.GetTarget.return" Name="return"
                       Direction="return">
               <Description>Target field that was passed to the Connect operation.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.FieldAlreadyConnected.GetTarget.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidArrayIndex" Name="InvalidArrayIndex"
            Visibility="public"
            Uuid="d5779719-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when an invalid index is specified.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidArrayIndex.GetInvalidIndex" Name="GetInvalidIndex"
                    Visibility="public">
            <Description>Get the invalid array index, i.e. the index that was passed as argument, but is outside of the array.</Description>
            <Parameter Id="Smp.InvalidArrayIndex.GetInvalidIndex.return" Name="return"
                       Direction="return">
               <Description>Invalid array index, i.e. the index that was passed as argument, but is outside of the array.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidArrayIndex.GetArraySize" Name="GetArraySize" Visibility="public">
            <Description>Get the array size.</Description>
            <Parameter Id="Smp.InvalidArrayIndex.GetArraySize.return" Name="return" Direction="return">
               <Description>Array size.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidArraySize" Name="InvalidArraySize"
            Visibility="public"
            Uuid="d5779710-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when an invalid array size is specified.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidArraySize.GetArraySize" Name="GetArraySize" Visibility="public">
            <Description>Get the array size.</Description>
            <Parameter Id="Smp.InvalidArraySize.GetArraySize.return" Name="return" Direction="return">
               <Description>Array size.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidArraySize.GetInvalidSize" Name="GetInvalidSize"
                    Visibility="public">
            <Description>Get the invalid array size, i.e. the size of the array that was passed as argument.</Description>
            <Parameter Id="Smp.InvalidArraySize.GetInvalidSize.return" Name="return"
                       Direction="return">
               <Description>Invalid array size, i.e. the size of the array that was passed as argument.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidArrayValue" Name="InvalidArrayValue"
            Visibility="public"
            Uuid="d5779709-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to assign an illegal value to an array field.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidArrayValue.GetInvalidValueIndex" Name="GetInvalidValueIndex"
                    Visibility="public">
            <Description>Get the index in the array where the first invalid value was found.</Description>
            <Parameter Id="Smp.InvalidArrayValue.GetInvalidValueIndex.return" Name="return"
                       Direction="return">
               <Description>Index in the array where the first invalid value was found.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidArrayValue.GetInvalidValue" Name="GetInvalidValue"
                    Visibility="public">
            <Description>Get the invalid value that was passed as new field value.</Description>
            <Parameter Id="Smp.InvalidArrayValue.GetInvalidValue.return" Name="return"
                       Direction="return">
               <Description>Invalid value that was passed as new field value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidComponentState"
            Name="InvalidComponentState"
            Visibility="public"
            Uuid="d55d57f6-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised by a component when one of the state transition commands is called in an invalid state.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidComponentState.GetInvalidState" Name="GetInvalidState"
                    Visibility="public">
            <Description>Get the invalid state in which a state transition was attempted.</Description>
            <Parameter Id="Smp.InvalidComponentState.GetInvalidState.return" Name="return"
                       Direction="return">
               <Description>Invalid state in which a state transition was attempted.</Description>
               <Type xlink:title="ComponentStateKind" xlink:href="#Smp.ComponentStateKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidComponentState.GetExpectedState" Name="GetExpectedState"
                    Visibility="public">
            <Description>Get the expected state of the component when calling this state transition.</Description>
            <Parameter Id="Smp.InvalidComponentState.GetExpectedState.return" Name="return"
                       Direction="return">
               <Description>Expected state of the component when calling this state transition.</Description>
               <Type xlink:title="ComponentStateKind" xlink:href="#Smp.ComponentStateKind"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidEventSink" Name="InvalidEventSink"
            Visibility="public"
            Uuid="d55d57bb-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to subscribe an event sink to an event source that has a different event type.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidEventSink.GetEventSource" Name="GetEventSource"
                    Visibility="public">
            <Description>Returns the event source that cannot be subscribed to the event sink.</Description>
            <Parameter Id="Smp.InvalidEventSink.GetEventSource.return" Name="return"
                       Direction="return">
               <Description>Event source that cannot be subscribed to the event sink.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.InvalidEventSink.GetEventSource.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSource" xlink:href="#Smp.IEventSource"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidEventSink.GetEventSink" Name="GetEventSink" Visibility="public">
            <Description>Returns the event sink that the event source that cannot be subscribed to.</Description>
            <Parameter Id="Smp.InvalidEventSink.GetEventSink.return" Name="return" Direction="return">
               <Description>Event sink that the event source that cannot be subscribed to.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.InvalidEventSink.GetEventSink.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidFieldName" Name="InvalidFieldName"
            Visibility="public"
            Uuid="d53c13b4-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when an invalid field name is specified.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidFieldName.GetFieldName" Name="GetFieldName" Visibility="public">
            <Description>Get the fully qualified field name that is invalid.</Description>
            <Parameter Id="Smp.InvalidFieldName.GetFieldName.return" Name="return" Direction="return">
               <Description>Fully qualified field name that is invalid.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidFieldType" Name="InvalidFieldType"
            Visibility="public"
            Uuid="e7cc6b40-eb8a-11dc-8642-c38618fe0a20">
         <Description>Invalid field type.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidLibrary" Name="InvalidLibrary"
            Visibility="public"
            Uuid="9711af89-e943-11e9-a377-f3d7a7ed9a31">
         <Description>This exception is raised when trying to load a library that does not contain an Initialise() function.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidLibrary.GetLibraryName" Name="GetLibraryName"
                    Visibility="public">
            <Description>Get the file name of the library that is invalid.</Description>
            <Parameter Id="Smp.InvalidLibrary.GetLibraryName.return" Name="return" Direction="return">
               <Description>Fully qualified field name that is invalid.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidOperationName"
            Name="InvalidOperationName"
            Visibility="public"
            Uuid="d56483d6-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised by the Invoke() method when trying to invoke a method that does not exist, or that does not support dynamic invocation.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidOperationName.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the Operation name of request passed to the Invoke() method.</Description>
            <Parameter Id="Smp.InvalidOperationName.GetOperationName.return" Name="return"
                       Direction="return">
               <Description>Operation name of request passed to the Invoke() method.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidParameterCount"
            Name="InvalidParameterCount"
            Visibility="public"
            Uuid="d56212c0-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised by the Invoke() method when trying to invoke a method with a wrong number of parameters.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidParameterCount.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the Operation name of request passed to the Invoke() method.</Description>
            <Parameter Id="Smp.InvalidParameterCount.GetOperationName.return" Name="return"
                       Direction="return">
               <Description>Operation name of request passed to the Invoke() method.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterCount.GetOperationParameters"
                    Name="GetOperationParameters"
                    Visibility="public">
            <Description>Get the correct number of parameters of operation.</Description>
            <Parameter Id="Smp.InvalidParameterCount.GetOperationParameters.return" Name="return"
                       Direction="return">
               <Description>Correct number of parameters of operation.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterCount.GetRequestParameters" Name="GetRequestParameters"
                    Visibility="public">
            <Description>Get the wrong number of parameters of operation.</Description>
            <Parameter Id="Smp.InvalidParameterCount.GetRequestParameters.return" Name="return"
                       Direction="return">
               <Description>Wrong number of parameters of operation.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidParameterIndex"
            Name="InvalidParameterIndex"
            Visibility="public"
            Uuid="d562128f-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when using an invalid parameter index to set (SetParameterValue()) or get (GetParameterValue()) a parameter value of an operation in a request.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidParameterIndex.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the name of the operation.</Description>
            <Parameter Id="Smp.InvalidParameterIndex.GetOperationName.return" Name="return"
                       Direction="return">
               <Description>Name of the operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterIndex.GetParameterIndex" Name="GetParameterIndex"
                    Visibility="public">
            <Description>Get the invalid parameter index used.</Description>
            <Parameter Id="Smp.InvalidParameterIndex.GetParameterIndex.return" Name="return"
                       Direction="return">
               <Description>Invalid parameter index used.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterIndex.GetParameterCount" Name="GetParameterCount"
                    Visibility="public">
            <Description>Get the number of parameters of the operation.</Description>
            <Parameter Id="Smp.InvalidParameterIndex.GetParameterCount.return" Name="return"
                       Direction="return">
               <Description>Number of parameters of the operation.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidParameterType"
            Name="InvalidParameterType"
            Visibility="public"
            Uuid="d56212ca-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised by the Invoke() method when trying to invoke a method passing a parameter of wrong type.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidParameterType.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the Operation name of request passed to the Invoke() method.</Description>
            <Parameter Id="Smp.InvalidParameterType.GetOperationName.return" Name="return"
                       Direction="return">
               <Description>Operation name of request passed to the Invoke() method.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterType.GetParameterName" Name="GetParameterName"
                    Visibility="public">
            <Description>Get the name of parameter of wrong type.</Description>
            <Parameter Id="Smp.InvalidParameterType.GetParameterName.return" Name="return"
                       Direction="return">
               <Description>Name of parameter of wrong type.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterType.GetInvalidType" Name="GetInvalidType"
                    Visibility="public">
            <Description>Get the Type that is not valid.</Description>
            <Parameter Id="Smp.InvalidParameterType.GetInvalidType.return" Name="return"
                       Direction="return">
               <Description>Type that is not valid.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterType.GetExpectedType" Name="GetExpectedType"
                    Visibility="public">
            <Description>Get the Type that was expected.</Description>
            <Parameter Id="Smp.InvalidParameterType.GetExpectedType.return" Name="return"
                       Direction="return">
               <Description>Type that was expected.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidParameterValue"
            Name="InvalidParameterValue"
            Visibility="public"
            Uuid="d5621296-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to assign an illegal value to a parameter of an operation in a request using SetParameterValue().</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidParameterValue.GetParameterName" Name="GetParameterName"
                    Visibility="public">
            <Description>Get the name of parameter value was assigned to.</Description>
            <Parameter Id="Smp.InvalidParameterValue.GetParameterName.return" Name="return"
                       Direction="return">
               <Description>Name of parameter value was assigned to.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidParameterValue.GetValue" Name="GetValue" Visibility="public">
            <Description>Get the value that was passed as parameter.</Description>
            <Parameter Id="Smp.InvalidParameterValue.GetValue.return" Name="return" Direction="return">
               <Description>Value that was passed as parameter.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidReturnValue"
            Name="InvalidReturnValue"
            Visibility="public"
            Uuid="d562129d-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to assign an invalid return value of an operation in a request using SetReturnValue().</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidReturnValue.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the name of the operation.</Description>
            <Parameter Id="Smp.InvalidReturnValue.GetOperationName.return" Name="return"
                       Direction="return">
               <Description>Name of the operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidReturnValue.GetValue" Name="GetValue" Visibility="public">
            <Description>Get the value that was passed as return value.</Description>
            <Parameter Id="Smp.InvalidReturnValue.GetValue.return" Name="return" Direction="return">
               <Description>Value that was passed as return value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidSimulatorState"
            Name="InvalidSimulatorState"
            Visibility="public"
            Uuid="0dedc8d0-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This exception is raised by the simulator when one of the operations is called in an invalid state.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidSimulatorState.GetInvalidState" Name="GetInvalidState"
                    Visibility="public">
            <Description>Get the invalid state in which an operation call was made.</Description>
            <Parameter Id="Smp.InvalidSimulatorState.GetInvalidState.return" Name="return"
                       Direction="return">
               <Description>Invalid state in which an operation call was made.</Description>
               <Type xlink:title="SimulatorStateKind" xlink:href="#Smp.SimulatorStateKind"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidTarget" Name="InvalidTarget"
            Visibility="public"
            Uuid="9b7c7c92-cc52-11e6-a1c3-13e36fcced83">
         <Description>This exception is raised when trying to connect two data flow fields of incompatible types.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidTarget.GetSource" Name="GetSource" Visibility="public">
            <Description>Get the field for which the Connect operation was called.</Description>
            <Parameter Id="Smp.InvalidTarget.GetSource.return" Name="return" Direction="return">
               <Description>Field for which the Connect operation was called</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.InvalidTarget.GetSource.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IDataflowField" xlink:href="#Smp.IDataflowField"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidTarget.GetTarget" Name="GetTarget" Visibility="public">
            <Description>Get the target field that was passed to the Connect operation.</Description>
            <Parameter Id="Smp.InvalidTarget.GetTarget.return" Name="return" Direction="return">
               <Description>Target field that was passed to the Connect operation.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.InvalidTarget.GetTarget.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.LibraryNotFound" Name="LibraryNotFound"
            Visibility="public"
            Uuid="9711af90-e943-11e9-a377-f3d7a7ed9a31">
         <Description>This exception is raised when trying to load a library that does not exist.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.LibraryNotFound.GetLibraryName" Name="GetLibraryName"
                    Visibility="public">
            <Description>Get the file name of the library that is invalid.</Description>
            <Parameter Id="Smp.LibraryNotFound.GetLibraryName.return" Name="return" Direction="return">
               <Description>Fully qualified field name that is invalid.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.NotContained" Name="NotContained"
            Visibility="public"
            Uuid="0dedc8b6-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>This exception is thrown when trying to delete a component from a container which is not contained.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.NotContained.GetContainerName" Name="GetContainerName"
                    Visibility="public">
            <Description>Get the name of the container.</Description>
            <Parameter Id="Smp.NotContained.GetContainerName.return" Name="return" Direction="return">
               <Description>Name of the container.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.NotContained.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Get the Component that is not contained.</Description>
            <Parameter Id="Smp.NotContained.GetComponent.return" Name="return" Direction="return">
               <Description>Component that is not contained.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.NotContained.GetComponent.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.NotReferenced" Name="NotReferenced"
            Visibility="public"
            Uuid="d53e5dd3-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is thrown when trying to remove a component from a reference which was not referenced before.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.NotReferenced.GetReferenceName" Name="GetReferenceName"
                    Visibility="public">
            <Description>Get the name of the reference.</Description>
            <Parameter Id="Smp.NotReferenced.GetReferenceName.return" Name="return" Direction="return">
               <Description>Name of the reference.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.NotReferenced.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Get the Component that is not referenced.</Description>
            <Parameter Id="Smp.NotReferenced.GetComponent.return" Name="return" Direction="return">
               <Description>Component that is not referenced.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.NotReferenced.GetComponent.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.ReferenceFull" Name="ReferenceFull"
            Visibility="public"
            Uuid="d53c13dc-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to add a component to a reference that is full, i.e. where the Count has reached the Upper limit.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.ReferenceFull.GetReferenceName" Name="GetReferenceName"
                    Visibility="public">
            <Description>Get the name of the reference.</Description>
            <Parameter Id="Smp.ReferenceFull.GetReferenceName.return" Name="return" Direction="return">
               <Description>Name of the reference.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ReferenceFull.GetReferenceSize" Name="GetReferenceSize"
                    Visibility="public">
            <Description>Get the number of components in the reference, which is its Upper limit when the reference is full.</Description>
            <Parameter Id="Smp.ReferenceFull.GetReferenceSize.return" Name="return" Direction="return">
               <Description>Number of components in the reference, which is its Upper limit when the reference is full.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Structure" Id="Smp.Uuid" Name="Uuid" Visibility="public"
            Uuid="d55b0e59-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Universally Unique Identifier.</Description>
         <Field Id="Smp.Uuid.Data1" Name="Data1" Visibility="public">
            <Description>8 hex nibbles.</Description>
            <Type xlink:title="UInt32" xlink:href="#Smp.UInt32"/>
            <Default xsi:type="Types:UInt32Value" Value="0"/>
         </Field>
         <Field Id="Smp.Uuid.Data2" Name="Data2" Visibility="public">
            <Description>3*4=12 hex nibbles.</Description>
            <Type xlink:title="UInt16" xlink:href="#Smp.UInt16"/>
            <Default xsi:type="Types:UInt16Value" Value="0"/>
         </Field>
         <Field Id="Smp.Uuid.Data3" Name="Data3" Visibility="public">
            <Description>6*2=12 hex nibbles.</Description>
            <Type xlink:title="UuidBytes" xlink:href="#Smp.UuidBytes"/>
         </Field>
      </Type>
      <Type xsi:type="Types:Array" Id="Smp.UuidBytes" Name="UuidBytes" Visibility="public"
            Uuid="d55b0e57-e618-11dc-ab64-bf8df6d7b83a"
            Size="6">
         <Description>Final 6 bytes of Uuid.</Description>
         <ItemType xlink:title="UInt8" xlink:href="#Smp.UInt8"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.VoidOperation" Name="VoidOperation"
            Visibility="public"
            Uuid="d56212a4-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to read (GetReturnValue()) or write (SetReturnValue()) the return value of a void operation.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.VoidOperation.GetOperationName" Name="GetOperationName"
                    Visibility="public">
            <Description>Get the name of the operation.</Description>
            <Parameter Id="Smp.VoidOperation.GetOperationName.return" Name="return" Direction="return">
               <Description>Name of the operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.AccessKind" Name="AccessKind"
            Visibility="public"
            Uuid="e7d5e125-eb8a-11dc-8642-c38618fe0a20">
         <Description>The Access Kind of a property defines whether it has getter and setter.</Description>
         <Literal Id="Smp.AccessKind.AK_ReadWrite" Name="AK_ReadWrite" Value="0">
            <Description>Read/Write access, i.e. getter and setter.</Description>
         </Literal>
         <Literal Id="Smp.AccessKind.AK_ReadOnly" Name="AK_ReadOnly" Value="1">
            <Description>Read only access, i.e. only getter method.</Description>
         </Literal>
         <Literal Id="Smp.AccessKind.AK_WriteOnly" Name="AK_WriteOnly" Value="2">
            <Description>Write only access, i.e. only setter method.</Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.ViewKind" Name="ViewKind"
            Visibility="public"
            Uuid="d579e033-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This enumeration defines possible options for the View attribute, which can be used to control if and how an element is made visible when published to the simulation infrastructure.
The simulation infrastructure must at least support the &quot;None&quot; and the &quot;All&quot; roles (i.e. hidden or always visible).
The simulation infrastructure may support the selection of different user roles, in which case the &quot;Debug&quot; and the &quot;Expert&quot; role must also be supported as described.</Description>
         <Literal Id="Smp.ViewKind.VK_None" Name="VK_None" Value="0">
            <Description>The element is not made visible to the user (this is the default).</Description>
         </Literal>
         <Literal Id="Smp.ViewKind.VK_Debug" Name="VK_Debug" Value="1">
            <Description>The element is made visible for debugging purposes.
The element is not visible to end users. If the simulation infrastructure supports the selection of different user roles, then the element shall be visible to &quot;Debug&quot; users only.</Description>
         </Literal>
         <Literal Id="Smp.ViewKind.VK_Expert" Name="VK_Expert" Value="2">
            <Description>The element is made visible for expert users.
The element is not visible to end users. If the simulation infrastructure supports the selection of different user roles, then the element shall be visible to &quot;Debug&quot; and &quot;Expert&quot; users.</Description>
         </Literal>
         <Literal Id="Smp.ViewKind.VK_All" Name="VK_All" Value="3">
            <Description>The element is made visible to all users.</Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.AnySimple" Name="AnySimple"
            Visibility="public"
            Uuid="d575259e-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Variant that can store a value of any of the simple types. The type attribute defines the type used to represent the value, while the value attribute contains the actual value.</Description>
         <Platform Name="cpp" Type="NT_AnySimple"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IObject" Name="IObject"
            Visibility="public"
            Uuid="d55b0e67-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This interface is the base interface for almost all other SMP interfaces. While most interfaces derive from IComponent, which itself is derived from IObject, some objects (including IField, IFailure, IEntryPoint, IEventSink, IEventSource, IContainer and IReference) are directly derived from IObject.</Description>
         <Operation Id="Smp.IObject.GetName" Name="GetName" Visibility="public">
            <Description>Return the name of the object.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IObject.GetName.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IObject.GetName.return" Name="return" Direction="return">
               <Description>Name of object.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IObject.GetDescription" Name="GetDescription" Visibility="public">
            <Description>Return the description of the object (&quot;property getter&quot;).</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IObject.GetDescription.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IObject.GetDescription.return" Name="return" Direction="return">
               <Description>Description of object.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IObject.GetParent" Name="GetParent" Visibility="public">
            <Description>Returns the parent object of the object.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IObject.GetParent.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IObject.GetParent.return" Name="return" Direction="return">
               <Description>Parent object of object or null if object has no parent.</Description>
               <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.Exception" Name="Exception"
            Visibility="public"
            Uuid="d5706b05-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This is the base class for all SMP exceptions.</Description>
         <Operation Id="Smp.Exception.what" Name="what" Visibility="public">
            <Description>Implements the C++ standard interface for exceptions.</Description>
            <Parameter Id="Smp.Exception.what.return" Name="return" Direction="return">
               <Description>Name of the exception class.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.Exception.GetName" Name="GetName" Visibility="public">
            <Description>Returns the name of the exception class. This name can be used e.g. for debugging purposes.</Description>
            <Parameter Id="Smp.Exception.GetName.return" Name="return" Direction="return">
               <Description>Name of the exception class.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.Exception.GetDescription" Name="GetDescription" Visibility="public">
            <Description>Returns a textual description of the exception class. This description can be used e.g. for debugging purposes.</Description>
            <Parameter Id="Smp.Exception.GetDescription.return" Name="return" Direction="return">
               <Description>Textual description of the exception class.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.Exception.GetMessage" Name="GetMessage" Visibility="public">
            <Description>Returns the description of the problem encountered. This message can be used e.g. for debugging purposes.
</Description>
            <Parameter Id="Smp.Exception.GetMessage.return" Name="return" Direction="return">
               <Description>Textual description of the problem encountered.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.Exception.GetSender" Name="GetSender" Visibility="public">
            <Description>Returns the sender of the exception instance. This object (and its name and path) can be used e.g. for debugging purposes.</Description>
            <Parameter Id="Smp.Exception.GetSender.return" Name="return" Direction="return">
               <Description>Object that emitted the exception.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.Exception.GetSender.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEventSource" Name="IEventSource"
            Visibility="public"
            Uuid="d55d579c-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an event source that event sinks (IEventSink) can subscribe to.</Description>
         <Operation Id="Smp.IEventSource.Subscribe" Name="Subscribe" Visibility="public">
            <Description>Subscribe to the event source, i.e. request notifications.</Description>
            <Parameter Id="Smp.IEventSource.Subscribe.eventSink" Name="eventSink" Direction="inout">
               <Description>Event sink to subscribe to event source.</Description>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
            <RaisedException xlink:title="EventSinkAlreadySubscribed"
                             xlink:href="#Smp.EventSinkAlreadySubscribed"/>
            <RaisedException xlink:title="InvalidEventSink" xlink:href="#Smp.InvalidEventSink"/>
         </Operation>
         <Operation Id="Smp.IEventSource.Unsubscribe" Name="Unsubscribe" Visibility="public">
            <Description>Unsubscribe from the event source, i.e. cancel notifications.</Description>
            <Parameter Id="Smp.IEventSource.Unsubscribe.eventSink" Name="eventSink" Direction="inout">
               <Description>Event sink to unsubscribe from event source.</Description>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
            <RaisedException xlink:title="EventSinkNotSubscribed" xlink:href="#Smp.EventSinkNotSubscribed"/>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IField" Name="IField"
            Visibility="public"
            Uuid="d57796d2-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of a field.</Description>
         <Operation Id="Smp.IField.GetView" Name="GetView" Visibility="public">
            <Description>Return View kind of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IField.GetView.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IField.GetView.return" Name="return" Direction="return">
               <Description>The View kind of the field.
The view kind indicates which user roles have visibility of the field.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IField.IsState" Name="IsState" Visibility="public">
            <Description>Return State flag of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IField.IsState.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IField.IsState.return" Name="return" Direction="return">
               <Description>The State flag of the field.
When true, the state of the field shall be stored by the simulation infrastructure persistence mechanism on Store(), and restored on Restore().</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IField.IsInput" Name="IsInput" Visibility="public">
            <Description>Return Input flag of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IField.IsInput.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IField.IsInput.return" Name="return" Direction="return">
               <Description>The Input flag of the field.
When true, the field is considered an input into the model and can be used as target of a field link in data flow based design.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IField.IsOutput" Name="IsOutput" Visibility="public">
            <Description>Return Output flag of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IField.IsOutput.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IField.IsOutput.return" Name="return" Direction="return">
               <Description>The Output flag of the field.
When true, the field is considered an output of the model and can be used as source of a field link in data flow based design.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IField.GetType" Name="GetType" Visibility="public">
            <Description>Returns the type of this field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IField.GetType.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IField.GetType.return" Name="return" Direction="return">
               <Description>The type of this field.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IField.GetType.return.Const" Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IType" xlink:href="#Smp.Publication.IType"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IPersist" xlink:href="#Smp.IPersist"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.EventSourceCollection"
            Name="EventSourceCollection"
            Visibility="public"
            Uuid="d55d57c2-e618-11dc-ab64-bf8df6d7b83a">
         <Description>An event source collection is an ordered collection of event sources, which allows iterating all members. 
</Description>
         <Platform Name="cpp" Type="ICollection&lt;IEventSource&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IArrayField" Name="IArrayField"
            Visibility="public"
            Uuid="d57796e5-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of a field which is of array type.</Description>
         <Operation Id="Smp.IArrayField.GetSize" Name="GetSize" Visibility="public">
            <Description>Get the size (number of array items) of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IArrayField.GetSize.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IArrayField.GetSize.return" Name="return" Direction="return">
               <Description>Size (number of array items) of the field.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IArrayField.GetItem" Name="GetItem" Visibility="public">
            <Description>Get an array item by index.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IArrayField.GetItem.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IArrayField.GetItem.return" Name="return" Direction="return">
               <Description>Array item (Field) at given index.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <Parameter Id="Smp.IArrayField.GetItem.index" Name="index">
               <Description>Index of item to get.</Description>
               <Type xlink:title="UInt64" xlink:href="#Smp.UInt64"/>
            </Parameter>
            <RaisedException xlink:title="InvalidArrayIndex" xlink:href="#Smp.InvalidArrayIndex"/>
         </Operation>
         <Base xlink:title="IField" xlink:href="#Smp.IField"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IDynamicInvocation"
            Name="IDynamicInvocation"
            Visibility="public"
            Uuid="d56212a9-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a component that supports dynamic invocation of operations.</Description>
         <Operation Id="Smp.IDynamicInvocation.CreateRequest" Name="CreateRequest"
                    Visibility="public">
            <Description>Return a request object for the given operation that describes the parameters and the return value.</Description>
            <Parameter Id="Smp.IDynamicInvocation.CreateRequest.return" Name="return"
                       Direction="return">
               <Description>Request object for operation, or null if either no operation with the given name could be found, or the operation with the given name does not support dynamic invocation.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
            <Parameter Id="Smp.IDynamicInvocation.CreateRequest.operationName" Name="operationName">
               <Description>Name of operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IDynamicInvocation.Invoke" Name="Invoke" Visibility="public">
            <Description>Dynamically invoke an operation using a request object that has been created and filled with parameter values by the caller.</Description>
            <Parameter Id="Smp.IDynamicInvocation.Invoke.request" Name="request" Direction="inout">
               <Description>Request object to invoke.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
            <RaisedException xlink:title="InvalidParameterCount" xlink:href="#Smp.InvalidParameterCount"/>
            <RaisedException xlink:title="InvalidOperationName" xlink:href="#Smp.InvalidOperationName"/>
            <RaisedException xlink:title="InvalidParameterType" xlink:href="#Smp.InvalidParameterType"/>
         </Operation>
         <Operation Id="Smp.IDynamicInvocation.DeleteRequest" Name="DeleteRequest"
                    Visibility="public">
            <Description>Destroy a request object that has been created with the CreateRequest() method before.</Description>
            <Parameter Id="Smp.IDynamicInvocation.DeleteRequest.request" Name="request"
                       Direction="inout">
               <Description>Request object to destroy.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IDynamicInvocation.GetProperties" Name="GetProperties"
                    Visibility="public">
            <Description>Provides the collection of properties that have been published.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IDynamicInvocation.GetProperties.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IDynamicInvocation.GetProperties.return" Name="return"
                       Direction="return">
               <Description>Collection of properties that have been published, which may be empty.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IDynamicInvocation.GetProperties.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="PropertyCollection" xlink:href="#Smp.PropertyCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IDynamicInvocation.GetOperations" Name="GetOperations"
                    Visibility="public">
            <Description>Provides the collection of operations that have been published.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IDynamicInvocation.GetOperations.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IDynamicInvocation.GetOperations.return" Name="return"
                       Direction="return">
               <Description>Collection of operations that have been published, which may be empty.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IDynamicInvocation.GetOperations.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="OperationCollection" xlink:href="#Smp.OperationCollection"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IRequest" Name="IRequest"
            Visibility="public"
            Uuid="d55fc872-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A request holds information, which is passed between a client invoking an operation via the IDynamicInvocation interface and a component being invoked. 
</Description>
         <Operation Id="Smp.IRequest.GetOperationName" Name="GetOperationName" Visibility="public">
            <Description>Return the name of the operation that this request is for.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.GetOperationName.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.GetOperationName.return" Name="return" Direction="return">
               <Description>Name of the operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IRequest.GetParameterCount" Name="GetParameterCount"
                    Visibility="public">
            <Description>Return the number of parameters stored in the request.
This only considers parameters of direction in, out or in/out, but not of type return.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.GetParameterCount.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.GetParameterCount.return" Name="return" Direction="return">
               <Description>Number of parameters in request object.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IRequest.GetParameterIndex" Name="GetParameterIndex"
                    Visibility="public">
            <Description>Query for a parameter index by parameter name.
This only considers parameters of direction in, out or in/out, but not of type return.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.GetParameterIndex.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.GetParameterIndex.return" Name="return" Direction="return">
               <Description>Index of parameter with the given name, or -1 if no parameter with the given name could be found.</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
            <Parameter Id="Smp.IRequest.GetParameterIndex.parameterName" Name="parameterName">
               <Description>Name of parameter.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IRequest.SetParameterValue" Name="SetParameterValue"
                    Visibility="public">
            <Description>Assign a value to a parameter at a given position.
This only considers parameters of direction in, out or in/out, but not of type return.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.SetParameterValue.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.SetParameterValue.index" Name="index">
               <Description>Index of parameter (0-based).</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
            <Parameter Id="Smp.IRequest.SetParameterValue.value" Name="value">
               <Description>Value of parameter.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="InvalidParameterIndex" xlink:href="#Smp.InvalidParameterIndex"/>
            <RaisedException xlink:title="InvalidParameterValue" xlink:href="#Smp.InvalidParameterValue"/>
            <RaisedException xlink:title="InvalidAnyType" xlink:href="#Smp.InvalidAnyType"/>
         </Operation>
         <Operation Id="Smp.IRequest.GetParameterValue" Name="GetParameterValue"
                    Visibility="public">
            <Description>Query a value of a parameter at a given position.
This only considers parameters of direction in, out or in/out, but not of type return.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.GetParameterValue.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.GetParameterValue.return" Name="return" Direction="return">
               <Description>Value of parameter. </Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <Parameter Id="Smp.IRequest.GetParameterValue.index" Name="index">
               <Description>Index of parameter (0-based).</Description>
               <Type xlink:title="Int32" xlink:href="#Smp.Int32"/>
            </Parameter>
            <RaisedException xlink:title="InvalidParameterIndex" xlink:href="#Smp.InvalidParameterIndex"/>
         </Operation>
         <Operation Id="Smp.IRequest.SetReturnValue" Name="SetReturnValue" Visibility="public">
            <Description>Assign the return value of the operation.</Description>
            <Parameter Id="Smp.IRequest.SetReturnValue.value" Name="value">
               <Description>Return value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="InvalidReturnValue" xlink:href="#Smp.InvalidReturnValue"/>
            <RaisedException xlink:title="VoidOperation" xlink:href="#Smp.VoidOperation"/>
            <RaisedException xlink:title="InvalidAnyType" xlink:href="#Smp.InvalidAnyType"/>
         </Operation>
         <Operation Id="Smp.IRequest.GetReturnValue" Name="GetReturnValue" Visibility="public">
            <Description>Query the return value of the operation.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IRequest.GetReturnValue.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IRequest.GetReturnValue.return" Name="return" Direction="return">
               <Description>Return value of the operation.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="VoidOperation" xlink:href="#Smp.VoidOperation"/>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.ISimpleField" Name="ISimpleField"
            Visibility="public"
            Uuid="d579e020-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of a field of simple type.</Description>
         <Operation Id="Smp.ISimpleField.GetPrimitiveTypeKind" Name="GetPrimitiveTypeKind"
                    Visibility="public">
            <Description>Get primitive type kind that this simple field uses.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimpleField.GetPrimitiveTypeKind.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimpleField.GetPrimitiveTypeKind.return" Name="return"
                       Direction="return">
               <Description>Primitive type kind that this field uses.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimpleField.GetValue" Name="GetValue" Visibility="public">
            <Description>Get the value of the simple field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimpleField.GetValue.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimpleField.GetValue.return" Name="return" Direction="return">
               <Description>Field value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimpleField.SetValue" Name="SetValue" Visibility="public">
            <Description>Set the value of the simple field.
If the given value simple type kind does match the simple type kind of the field, than it changes the field value to the given value.</Description>
            <Parameter Id="Smp.ISimpleField.SetValue.value" Name="value">
               <Description>Field value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="InvalidFieldValue" xlink:href="#Smp.InvalidFieldValue"/>
         </Operation>
         <Base xlink:title="IField" xlink:href="#Smp.IField"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IForcibleField" Name="IForcibleField"
            Visibility="public"
            Uuid="d5779722-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of a forcible field.</Description>
         <Operation Id="Smp.IForcibleField.Force" Name="Force" Visibility="public">
            <Description>Force field to given value.</Description>
            <Parameter Id="Smp.IForcibleField.Force.value" Name="value">
               <Description>Value to force field to.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
            <RaisedException xlink:title="InvalidFieldValue" xlink:href="#Smp.InvalidFieldValue"/>
         </Operation>
         <Operation Id="Smp.IForcibleField.Unforce" Name="Unforce" Visibility="public">
            <Description>Unforce field.</Description>
         </Operation>
         <Operation Id="Smp.IForcibleField.IsForced" Name="IsForced" Visibility="public">
            <Description>Query for the forced state of the field.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IForcibleField.IsForced.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IForcibleField.IsForced.return" Name="return" Direction="return">
               <Description>Whether the field is forced or not.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IForcibleField.Freeze" Name="Freeze" Visibility="public">
            <Description>Force field to its current value.</Description>
         </Operation>
         <Base xlink:title="ISimpleField" xlink:href="#Smp.ISimpleField"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IPersist" Name="IPersist"
            Visibility="public"
            Uuid="d55fc858-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of a self-persisting object that provides operations to allow for storing and restoring its state.</Description>
         <Operation Id="Smp.IPersist.Restore" Name="Restore" Visibility="public">
            <Description>Restore object state from storage.</Description>
            <Parameter Id="Smp.IPersist.Restore.reader" Name="reader" Direction="inout">
               <Description>Interface that allows reading from storage.</Description>
               <Type xlink:title="IStorageReader" xlink:href="#Smp.IStorageReader"/>
            </Parameter>
            <RaisedException xlink:title="CannotRestore" xlink:href="#Smp.CannotRestore"/>
         </Operation>
         <Operation Id="Smp.IPersist.Store" Name="Store" Visibility="public">
            <Description>Store object state to storage.</Description>
            <Parameter Id="Smp.IPersist.Store.writer" Name="writer" Direction="inout">
               <Description>Interface that allows writing to storage.</Description>
               <Type xlink:title="IStorageWriter" xlink:href="#Smp.IStorageWriter"/>
            </Parameter>
            <RaisedException xlink:title="CannotStore" xlink:href="#Smp.CannotStore"/>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IStorageReader" Name="IStorageReader"
            Visibility="public"
            Uuid="d55fc850-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This interface provides functionality to read data from storage.</Description>
         <Operation Id="Smp.IStorageReader.GetStateVectorFileName" Name="GetStateVectorFileName"
                    Visibility="public">
            <Description>Get the state vector file name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStorageReader.GetStateVectorFileName.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStorageReader.GetStateVectorFileName.return" Name="return"
                       Direction="return">
               <Description>This method returns the full path of the state vector file currently loaded by the Storage Reader.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IStorageReader.GetStateVectorFilePath" Name="GetStateVectorFilePath"
                    Visibility="public">
            <Description>Get the state vector file path.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStorageReader.GetStateVectorFilePath.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStorageReader.GetStateVectorFilePath.return" Name="return"
                       Direction="return">
               <Description>This method returns the full path for auxiliary files corresponding to the state vector file currently loaded by the Storage Reader.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IStorageWriter" Name="IStorageWriter"
            Visibility="public"
            Uuid="d55fc854-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This interface provides functionality to write data to storage.</Description>
         <Operation Id="Smp.IStorageWriter.GetStateVectorFileName" Name="GetStateVectorFileName"
                    Visibility="public">
            <Description>Get the state vector file name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStorageWriter.GetStateVectorFileName.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStorageWriter.GetStateVectorFileName.return" Name="return"
                       Direction="return">
               <Description>This method returns the full path of the state vector file currently stored by the Storage Writer.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IStorageWriter.GetStateVectorFilePath" Name="GetStateVectorFilePath"
                    Visibility="public">
            <Description>Get the state vector file path.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IStorageWriter.GetStateVectorFilePath.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IStorageWriter.GetStateVectorFilePath.return" Name="return"
                       Direction="return">
               <Description>This method returns the full path for auxiliary files corresponding to the state vector file currently stored by the Storage Writer.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEntryPoint" Name="IEntryPoint"
            Visibility="public"
            Uuid="d55b0e86-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an entry point.</Description>
         <Operation Id="Smp.IEntryPoint.Execute" Name="Execute" Visibility="public">
            <Description>This method shall be called when an associated event is emitted.</Description>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.SimulatorStateKind"
            Name="SimulatorStateKind"
            Visibility="public"
            Uuid="d56483dc-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This is an enumeration of the available states of the simulator. The Setup phase is split into three different states, the Execution phase has five different states, and the Termination phase has two states.</Description>
         <Literal Id="Smp.SimulatorStateKind.SSK_Building" Name="SSK_Building" Value="0">
            <Description>In Building state, the component hierarchy is created. This is done by an external component, not by the simulator. 
This state is entered automatically after the simulation environment has performed its initialisation.
In this state, Publish() and Configure() can be called any time to call the corresponding Publish() and Configure() operations of each component.
This state is left with the Connect() state transition method.</Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Connecting" Name="SSK_Connecting" Value="1">
            <Description>In Connecting state, the simulation environment traverses the component hierarchy and calls the Connect() method of each component.
This state is entered using the Connect() state transition.
After connecting all components to the simulator, an automatic state transition to the Initialising state is performed. </Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Initialising" Name="SSK_Initialising" Value="2">
            <Description>In Initialising state, the simulation environment executes all initialisation entry points in the order they have been added to the simulator using the AddInitEntryPoint() method.
This state is either entered automatically after the simulation environment has connected all models to the simulator, or manually from Standby state using the Initialise() state transition.
After calling all initialisation entry points, an automatic state transition to the Standby state is performed. </Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Standby" Name="SSK_Standby" Value="3">
            <Description>In Standby state, the simulation environment (namely the Time Keeper Service) does not progress simulation time. Only entry points registered relative to Zulu time are executed.
This state is entered automatically from the Initialising, Storing, and Restoring states, or manually from the Executing state using the Hold() state transition.
This state is left with one of the Run(), Store(), Restore(), Initialise(), Reconnect() or Exit() state transitions.</Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Executing" Name="SSK_Executing" Value="4">
            <Description>In Executing state, the simulation environment (namely the Time Keeper Service) does progress simulation time. Entry points registered with any of the available time kinds are executed.
This state is entered using the Run() state transition.
This state is left using the Hold() state transition.</Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Storing" Name="SSK_Storing" Value="5">
            <Description>In Storing state, the simulation environment first stores the values of all fields published with the State attribute to storage (typically a file). Afterwards, the Store() method of all components (Models and Services) implementing the optional IPersist interface is called, to allow custom storing of additional information. While in this state, fields published with the State attribute must not be modified by the models, to ensure that a consistent set of field values is stored. 
This state is entered using the Store() state transition.
After storing the simulator state, an automatic state transition to the Standby state is performed. </Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Restoring" Name="SSK_Restoring" Value="6">
            <Description>In Restoring state, the simulation environment first restores the values of all fields published with the State attribute from storage. Afterwards, the Restore() method of all components implementing the optional IPersist interface is called, to allow custom restoring of additional information. While in this state, fields published with the State attribute must not be modified by the models, to ensure that a consistent set of field values is restored. 
This state is entered using the Restore() state transition.
After restoring the simulator state, an automatic state transition to the Standby state is performed. </Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Reconnecting" Name="SSK_Reconnecting" Value="7">
            <Description>In Reconnecting state, the simulation environment makes sure that models that have been added to the simulator after leaving the Building state are properly published, configured and connected.
This state is entered using the Reconnect() state transition.
After connecting all new models, an automatic state transition to the Standby state is performed.</Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Exiting" Name="SSK_Exiting" Value="8">
            <Description>In Exiting state, the simulation environment is properly terminating a running simulation.
This state is entered using the Exit() state transition. After exiting, the simulator is in an undefined state. </Description>
         </Literal>
         <Literal Id="Smp.SimulatorStateKind.SSK_Aborting" Name="SSK_Aborting" Value="9">
            <Description>In this state, the simulation environment performs an abnormal simulation shut-down.
This state is entered using the Abort() state transition. After aborting, the simulator is in an undefined state. </Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.EntryPointCollection"
            Name="EntryPointCollection"
            Visibility="public"
            Uuid="d55b0e92-e618-11dc-ab64-bf8df6d7b83a">
         <Description>An entry point collection is an ordered collection of entry points, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IEntryPoint&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.ISimulator" Name="ISimulator"
            Visibility="public"
            Uuid="d566f4f2-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This interface gives access to the simulation environment state and state transitions. Further, it provides convenience methods to add models, and to add and retrieve simulation services.</Description>
         <Constant Id="Smp.ISimulator.SMP_SimulatorModels" Name="SMP_SimulatorModels"
                   Visibility="public">
            <Description>Name of the model container.</Description>
            <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            <Value xsi:type="Types:String8Value" Value="Models"/>
         </Constant>
         <Constant Id="Smp.ISimulator.SMP_SimulatorServices" Name="SMP_SimulatorServices"
                   Visibility="public">
            <Description>Name of the service container.</Description>
            <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            <Value xsi:type="Types:String8Value" Value="Services"/>
         </Constant>
         <Operation Id="Smp.ISimulator.GetLinkRegistry" Name="GetLinkRegistry" Visibility="public">
            <Description>Return interface to link registry service.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetLinkRegistry.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetLinkRegistry.return" Name="return" Direction="return">
               <Description>Interface to mandatory link registry service.</Description>
               <Type xlink:title="ILinkRegistry" xlink:href="#Smp.Services.ILinkRegistry"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.RegisterFactory" Name="RegisterFactory" Visibility="public">
            <Description>This method registers a component factory with the simulator. The simulator can use this factory to create component instances of the component implementation in its CreateInstance() method.
The memory management of the factory is passed to the simulator, who is in charge of deleting the factory at the exiting or aborting state.</Description>
            <Parameter Id="Smp.ISimulator.RegisterFactory.componentFactory" Name="componentFactory"
                       Direction="inout">
               <Description>Factory to create instance of the component implementation.</Description>
               <Type xlink:title="IFactory" xlink:href="#Smp.IFactory"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateUuid" xlink:href="#Smp.DuplicateUuid"/>
         </Operation>
         <Operation Id="Smp.ISimulator.CreateInstance" Name="CreateInstance" Visibility="public">
            <Description>This method creates an instance of the component with the given unique identifier.</Description>
            <Parameter Id="Smp.ISimulator.CreateInstance.return" Name="return" Direction="return">
               <Description>New instance of the component with the given implementation identifier or null in case no factory for the given implementation identifier has been registered.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.CreateInstance.uuid" Name="uuid">
               <Description>Unique identifier of the component to create.</Description>
               <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.CreateInstance.name" Name="name">
               <Description>Name of the new instance.
f the name provided is not a valid object name, an exception of type InvalidObjectName is raised.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.CreateInstance.description" Name="description">
               <Description>Description of the new instance.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.CreateInstance.parent" Name="parent" Direction="inout">
               <Description>Parent object of the new instance.</Description>
               <Type xlink:title="IComposite" xlink:href="#Smp.IComposite"/>
            </Parameter>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.ISimulator.GetFactory" Name="GetFactory" Visibility="public">
            <Description>This method returns the factory of the component with the given implementation identifier.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetFactory.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetFactory.return" Name="return" Direction="return">
               <Description>Factory of the component with the given implementation identifier or null in case no factory for the given implementation identifier has been registered.</Description>
               <Type xlink:title="IFactory" xlink:href="#Smp.IFactory"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.GetFactory.uuid" Name="uuid">
               <Description>Unique identifier of the component to get the factory for.</Description>
               <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetFactories" Name="GetFactories" Visibility="public">
            <Description>This method returns all factories that have been registered with the simulator.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetFactories.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetFactories.return" Name="return" Direction="return">
               <Description>Collection of factories.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetFactories.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="FactoryCollection" xlink:href="#Smp.FactoryCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetTypeRegistry" Name="GetTypeRegistry" Visibility="public">
            <Description>Give access to the global type registry.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetTypeRegistry.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetTypeRegistry.return" Name="return" Direction="return">
               <Description>Reference to global type registry.</Description>
               <Type xlink:title="ITypeRegistry" xlink:href="#Smp.Publication.ITypeRegistry"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.LoadLibrary" Name="LoadLibrary" Visibility="public">
            <Description>This operation loads a library of a package into memory.
At loading time, the Initialise() function of this library will be called.
At exiting or aborting time, the Finalise() function of this library will be called.</Description>
            <Parameter Id="Smp.ISimulator.LoadLibrary.libraryPath" Name="libraryPath">
               <Description>Path to the library to load.
This needs to be a valid path name given the constraints of the operating system.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <RaisedException xlink:title="LibraryNotFound" xlink:href="#Smp.LibraryNotFound"/>
            <RaisedException xlink:title="InvalidLibrary" xlink:href="#Smp.InvalidLibrary"/>
         </Operation>
         <Operation Id="Smp.ISimulator.Initialise" Name="Initialise" Visibility="public">
            <Description>This method asks the simulation environment to call all initialisation entry points again.</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.AddModel" Name="AddModel" Visibility="public">
            <Description>This method adds a model to the models collection of the simulator, i.e. to the &quot;Models&quot; container.</Description>
            <Parameter Id="Smp.ISimulator.AddModel.model" Name="model" Direction="inout">
               <Description>New model to add to collection of root models, i.e. to the &quot;Models&quot; container.</Description>
               <Type xlink:title="IModel" xlink:href="#Smp.IModel"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
            <RaisedException xlink:title="InvalidSimulatorState" xlink:href="#Smp.InvalidSimulatorState"/>
         </Operation>
         <Operation Id="Smp.ISimulator.AddService" Name="AddService" Visibility="public">
            <Description>This method adds a user-defined service to the services collection, i.e. to the &quot;Services&quot; container.</Description>
            <Parameter Id="Smp.ISimulator.AddService.service" Name="service" Direction="inout">
               <Description>Service to add to services collection.</Description>
               <Type xlink:title="IService" xlink:href="#Smp.IService"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
            <RaisedException xlink:title="InvalidSimulatorState" xlink:href="#Smp.InvalidSimulatorState"/>
         </Operation>
         <Operation Id="Smp.ISimulator.GetService" Name="GetService" Visibility="public">
            <Description>Query for a service component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetService.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetService.return" Name="return" Direction="return">
               <Description>Service with the given name, or null if no service with the given name could be found.</Description>
               <Type xlink:title="IService" xlink:href="#Smp.IService"/>
            </Parameter>
            <Parameter Id="Smp.ISimulator.GetService.name" Name="name">
               <Description>Service name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetLogger" Name="GetLogger" Visibility="public">
            <Description>Return interface to logger service. </Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetLogger.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetLogger.return" Name="return" Direction="return">
               <Description>Interface to mandatory logger service.</Description>
               <Type xlink:title="ILogger" xlink:href="#Smp.Services.ILogger"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetTimeKeeper" Name="GetTimeKeeper" Visibility="public">
            <Description>Return interface to time keeper service.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetTimeKeeper.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetTimeKeeper.return" Name="return" Direction="return">
               <Description>Interface to mandatory time keeper service.</Description>
               <Type xlink:title="ITimeKeeper" xlink:href="#Smp.Services.ITimeKeeper"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetScheduler" Name="GetScheduler" Visibility="public">
            <Description>Return interface to scheduler service.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetScheduler.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetScheduler.return" Name="return" Direction="return">
               <Description>Interface to mandatory scheduler service.</Description>
               <Type xlink:title="IScheduler" xlink:href="#Smp.Services.IScheduler"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetEventManager" Name="GetEventManager" Visibility="public">
            <Description>Return interface to event manager service.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetEventManager.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetEventManager.return" Name="return" Direction="return">
               <Description>Interface to mandatory event manager service.</Description>
               <Type xlink:title="IEventManager" xlink:href="#Smp.Services.IEventManager"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.GetResolver" Name="GetResolver" Visibility="public">
            <Description>Return interface to resolver service.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetResolver.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetResolver.return" Name="return" Direction="return">
               <Description>Interface to mandatory resolver service.</Description>
               <Type xlink:title="IResolver" xlink:href="#Smp.Services.IResolver"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.Publish" Name="Publish" Visibility="public">
            <Description>This method asks the simulation environment to call the Publish() method of all service and model instances in the component hierarchy which are still in Created state.
</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.Configure" Name="Configure" Visibility="public">
            <Description>This method asks the simulation environment to call the Configure() method of all service and model instances which are still in Publishing state.
</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.Connect" Name="Connect" Visibility="public">
            <Description>This method informs the simulation environment that the hierarchy of model instances has been configured, and can now be connected to the simulator. Thus, the simulation environment calls the Connect() method of all service and model instances.</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.Run" Name="Run" Visibility="public">
            <Description>This method changes from Standby to Executing state.</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.Hold" Name="Hold" Visibility="public">
            <Description>This method changes from Executing to Standby state.</Description>
            <Parameter Id="Smp.ISimulator.Hold.immediate" Name="immediate">
               <Description>True if the simulator shall stop immediately after completion of the current scheduler event, false if the simulator shall still process all events of the current simulation time before entering Standby state.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.Store" Name="Store" Visibility="public">
            <Description>This method is used to store a state vector to file.</Description>
            <Parameter Id="Smp.ISimulator.Store.filename" Name="filename">
               <Description>Name including the full path to use for simulation state vector file.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.Restore" Name="Restore" Visibility="public">
            <Description>This method is used to restore a state vector from file.</Description>
            <Parameter Id="Smp.ISimulator.Restore.filename" Name="filename">
               <Description>Name including the full path of simulation state vector file.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.Reconnect" Name="Reconnect" Visibility="public">
            <Description>This method asks the simulation environment to reconnect the component hierarchy starting at the given root component.</Description>
            <Parameter Id="Smp.ISimulator.Reconnect.root" Name="root" Direction="inout">
               <Description>Root component to start reconnecting from. This can be the parent component of a newly added model, or e.g. the simulator itself.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.Exit" Name="Exit" Visibility="public">
            <Description>This method is used for a normal termination of a simulation.</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.Abort" Name="Abort" Visibility="public">
            <Description>This method is used for an abnormal termination of a simulation.</Description>
         </Operation>
         <Operation Id="Smp.ISimulator.GetState" Name="GetState" Visibility="public">
            <Description>Return the current simulator state.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.ISimulator.GetState.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.ISimulator.GetState.return" Name="return" Direction="return">
               <Description>Current simulator state.</Description>
               <Type xlink:title="SimulatorStateKind" xlink:href="#Smp.SimulatorStateKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ISimulator.AddInitEntryPoint" Name="AddInitEntryPoint"
                    Visibility="public">
            <Description>This method can be used to add entry points that shall be executed in the Initialising state.
If the simulation is in Building, Connecting or Standby state, it adds the entry point to the list of entry points to be executed once the simulation reaches Initialising state.
If the simulation is not in Building, Connecting or Standby state, then it returns and no action is taken.
This allows components to subscribe to a callback during initialization phase since there are only explicit methods defined for Publish, Configure and Connect. This choice is taken since most models require actions to be taken in Publish, Configure and Connect, however only a minority require to perform some actions during initialization.</Description>
            <Parameter Id="Smp.ISimulator.AddInitEntryPoint.entryPoint" Name="entryPoint"
                       Direction="inout">
               <Description>Entry point to execute in Initialising state.</Description>
               <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComposite" xlink:href="#Smp.IComposite"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IFactory" Name="IFactory"
            Visibility="public"
            Uuid="d56baf53-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a component factory.</Description>
         <Operation Id="Smp.IFactory.GetUuid" Name="GetUuid" Visibility="public">
            <Description>Get Universally unique identifier of the type instantiated by the factory.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFactory.GetUuid.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFactory.GetUuid.return" Name="return" Direction="return">
               <Description>Universally unique identifier of component.</Description>
               <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IFactory.GetTypeName" Name="GetTypeName" Visibility="public">
            <Description>Returns the fully qualified C++ name of the type.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IFactory.GetTypeName.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IFactory.GetTypeName.return" Name="return" Direction="return">
               <Description>Fully qualified C++ name of type that is created by this factory.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IFactory.CreateInstance" Name="CreateInstance" Visibility="public">
            <Description>Create a new instance with given name, description and parent.</Description>
            <Parameter Id="Smp.IFactory.CreateInstance.return" Name="return" Direction="return">
               <Description>New component instance.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <Parameter Id="Smp.IFactory.CreateInstance.name" Name="name">
               <Description>Name of the new instance.
f the name provided is not a valid object name, an exception of type InvalidObjectName is raised.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IFactory.CreateInstance.description" Name="description">
               <Description>Description of the new instance.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IFactory.CreateInstance.parent" Name="parent" Direction="inout">
               <Description>Parent object of the new instance.</Description>
               <Type xlink:title="IComposite" xlink:href="#Smp.IComposite"/>
            </Parameter>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.IFactory.DeleteInstance" Name="DeleteInstance" Visibility="public">
            <Description>Delete an existing instance.</Description>
            <Parameter Id="Smp.IFactory.DeleteInstance.instance" Name="instance" Direction="inout">
               <Description>Instance to delete.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.FactoryCollection" Name="FactoryCollection"
            Visibility="public"
            Uuid="d56baf66-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A factory collection is an ordered collection of factories, which allows iterating all members.
</Description>
         <Platform Name="cpp" Type="ICollection&lt;IFactory&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IPublication" Name="IPublication"
            Visibility="public"
            Uuid="d56baf6b-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface that provides functionality to allow publishing members, including fields, properties and operations.</Description>
         <Operation Id="Smp.IPublication.GetTypeRegistry" Name="GetTypeRegistry"
                    Visibility="public">
            <Description>Give access to the global type registry.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetTypeRegistry.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IPublication.GetTypeRegistry.return" Name="return" Direction="return">
               <Description>Reference to global type registry.</Description>
               <Type xlink:title="ITypeRegistry" xlink:href="#Smp.Publication.ITypeRegistry"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.PublishField" Name="PublishField" Visibility="public">
            <Description>Publish a field defined internally that implements the IField interface.
If a field with the same name has been published before, an exception of type DuplicateName is thrown.</Description>
            <Parameter Id="Smp.IPublication.PublishField.field" Name="field" Direction="inout">
               <Description>Field to publish.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
         </Operation>
         <Operation Id="Smp.IPublication.PublishArray" Name="PublishArray" Visibility="public">
            <Description>Publish top-level node of an array without using the type registry.
This operation can be used, together with subsequent calls to PublishField, for direct publication of an array.</Description>
            <Parameter Id="Smp.IPublication.PublishArray.name" Name="name">
               <Description>Array name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishArray.description" Name="description">
               <Description>Array description.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishArray.return" Name="return" Direction="return">
               <Description>Interface to publish item type against.</Description>
               <Type xlink:title="IPublication" xlink:href="#Smp.IPublication"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishArray.view" Name="view">
               <Description>Show field in model tree.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
               <Default xsi:type="Types:Int32Value" Value="3"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishArray.state" Name="state">
               <Description>Include field in store/restore of simulation state.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               <Default xsi:type="Types:BoolValue" Value="true"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.IPublication.PublishStructure" Name="PublishStructure"
                    Visibility="public">
            <Description>Publish top-level node of a structure without using the type registry.
This operation can be used, together with subsequent calls to PublishField, for direct publication of a structure.</Description>
            <Parameter Id="Smp.IPublication.PublishStructure.name" Name="name">
               <Description>Structure name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishStructure.description" Name="description">
               <Description>Structure description.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishStructure.return" Name="return" Direction="return">
               <Description>Reference to publish structure fields against.</Description>
               <Type xlink:title="IPublication" xlink:href="#Smp.IPublication"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishStructure.view" Name="view">
               <Description>Show field in model tree.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
               <Default xsi:type="Types:Int32Value" Value="3"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishStructure.state" Name="state">
               <Description>Include field in store/restore of simulation state.</Description>
               <Type xlink:title="Bool" xlink:href="#Smp.Bool"/>
               <Default xsi:type="Types:BoolValue" Value="true"/>
            </Parameter>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.IPublication.PublishOperation" Name="PublishOperation"
                    Visibility="public">
            <Description>Publish an operation with the given name, description and view kind.
If an Operations with the same name has already been published, this will update the &quot;description&quot; and &quot;view&quot;  of the previous publication and it returns the same IPublishOperation of the previously published Operation.
If an Operation with the same name has not been published, this creates a new IPublishOperation instance and returns it.</Description>
            <Parameter Id="Smp.IPublication.PublishOperation.name" Name="name">
               <Description>Name of operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishOperation.description" Name="description">
               <Description>Description of operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishOperation.view" Name="view">
               <Description>View kind of operation node in simulation tree.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
               <Default xsi:type="Types:Int32Value" Value="0"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishOperation.return" Name="return" Direction="return">
               <Description>Reference to publish parameters against.</Description>
               <Type xlink:title="IPublishOperation" xlink:href="#Smp.Publication.IPublishOperation"/>
            </Parameter>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.IPublication.PublishProperty" Name="PublishProperty"
                    Visibility="public">
            <Description>Publish a property</Description>
            <Parameter Id="Smp.IPublication.PublishProperty.name" Name="name">
               <Description>Property name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishProperty.description" Name="description">
               <Description>Property description.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishProperty.typeUuid" Name="typeUuid">
               <Description>Uuid of type of property.</Description>
               <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishProperty.accessKind" Name="accessKind">
               <Description>Access kind of Property.</Description>
               <Type xlink:title="AccessKind" xlink:href="#Smp.AccessKind"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.PublishProperty.view" Name="view">
               <Description>Show field in model tree.</Description>
               <Type xlink:title="ViewKind" xlink:href="#Smp.ViewKind"/>
               <Default xsi:type="Types:Int32Value" Value="0"/>
            </Parameter>
            <RaisedException xlink:title="TypeNotRegistered" xlink:href="#Smp.Publication.TypeNotRegistered"/>
            <RaisedException xlink:title="InvalidObjectName" xlink:href="#Smp.InvalidObjectName"/>
         </Operation>
         <Operation Id="Smp.IPublication.GetField" Name="GetField" Visibility="public">
            <Description>Get the field of given name.
</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetField.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IPublication.GetField.return" Name="return" Direction="return">
               <Description>Instance of field for given full name.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.GetField.fullName" Name="fullName">
               <Description>Fully qualified field name (relative to the component).</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <RaisedException xlink:title="InvalidFieldName" xlink:href="#Smp.InvalidFieldName"/>
         </Operation>
         <Operation Id="Smp.IPublication.GetFields" Name="GetFields" Visibility="public">
            <Description>Returns a collection of all fields that have been published.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetFields.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IPublication.GetFields.return" Name="return" Direction="return">
               <Description>Collection of the fields (immediate children) of the component.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetFields.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="FieldCollection" xlink:href="#Smp.FieldCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.GetProperties" Name="GetProperties" Visibility="public">
            <Description>Provides the collection of properties that have been published.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetProperties.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IPublication.GetProperties.return" Name="return" Direction="return">
               <Description>Collection of properties that have been published, which may be empty.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetProperties.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="PropertyCollection" xlink:href="#Smp.PropertyCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.GetOperations" Name="GetOperations" Visibility="public">
            <Description>Provides the collection of operations that have been published.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetOperations.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IPublication.GetOperations.return" Name="return" Direction="return">
               <Description>Collection of operations that have been published, which may be empty.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IPublication.GetOperations.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="OperationCollection" xlink:href="#Smp.OperationCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.CreateRequest" Name="CreateRequest" Visibility="public">
            <Description>Create request object.</Description>
            <Parameter Id="Smp.IPublication.CreateRequest.operationName" Name="operationName">
               <Description>Name of operation.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <Parameter Id="Smp.IPublication.CreateRequest.return" Name="return" Direction="return">
               <Description>Request object for operation.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.DeleteRequest" Name="DeleteRequest" Visibility="public">
            <Description>Delete request object.</Description>
            <Parameter Id="Smp.IPublication.DeleteRequest.request" Name="request" Direction="inout">
               <Description>Request object to delete.</Description>
               <Type xlink:title="IRequest" xlink:href="#Smp.IRequest"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IPublication.Unpublish" Name="Unpublish" Visibility="public">
            <Description>Call this operation to release all data created during earlier Publish calls to this instance.
This invalidated all pointers retrieved earlier via GetField(), GetFields() or CreateRequest().</Description>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IComponent" Name="IComponent"
            Visibility="public"
            Uuid="d55b0e77-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This is the base interface for all SMP components.</Description>
         <Operation Id="Smp.IComponent.GetState" Name="GetState" Visibility="public">
            <Description>Returns the state the component is currently in.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetState.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComponent.GetState.return" Name="return" Direction="return">
               <Description>Current component state.</Description>
               <Type xlink:title="ComponentStateKind" xlink:href="#Smp.ComponentStateKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IComponent.Publish" Name="Publish" Visibility="public">
            <Description>Request the component to publish its fields, properties and operations against the provided publication receiver.</Description>
            <Parameter Id="Smp.IComponent.Publish.receiver" Name="receiver" Direction="inout">
               <Description>Publication receiver.</Description>
               <Type xlink:title="IPublication" xlink:href="#Smp.IPublication"/>
            </Parameter>
            <RaisedException xlink:title="InvalidComponentState" xlink:href="#Smp.InvalidComponentState"/>
         </Operation>
         <Operation Id="Smp.IComponent.Configure" Name="Configure" Visibility="public">
            <Description>Request the component to perform any custom configuration. The component can create and configure other components using the field values of its published fields.</Description>
            <Parameter Id="Smp.IComponent.Configure.logger" Name="logger" Direction="inout">
               <Description>Logger service for logging of error messages during configuration.</Description>
               <Type xlink:title="ILogger" xlink:href="#Smp.Services.ILogger"/>
            </Parameter>
            <Parameter Id="Smp.IComponent.Configure.linkRegistry" Name="linkRegistry"
                       Direction="inout">
               <Description>Reference to the link registry services, so that the component can register links that it creates during configuration.</Description>
               <Type xlink:title="ILinkRegistry" xlink:href="#Smp.Services.ILinkRegistry"/>
            </Parameter>
            <RaisedException xlink:title="InvalidComponentState" xlink:href="#Smp.InvalidComponentState"/>
         </Operation>
         <Operation Id="Smp.IComponent.Connect" Name="Connect" Visibility="public">
            <Description>Allow the component to connect to the simulator and its simulation services.</Description>
            <Parameter Id="Smp.IComponent.Connect.simulator" Name="simulator" Direction="inout">
               <Description>Simulation Environment that hosts the component.</Description>
               <Type xlink:title="ISimulator" xlink:href="#Smp.ISimulator"/>
            </Parameter>
            <RaisedException xlink:title="InvalidComponentState" xlink:href="#Smp.InvalidComponentState"/>
         </Operation>
         <Operation Id="Smp.IComponent.Disconnect" Name="Disconnect" Visibility="public">
            <Description>Ask the component to disconnect from the simulator and all its simulation services.</Description>
            <RaisedException xlink:title="InvalidComponentState" xlink:href="#Smp.InvalidComponentState"/>
         </Operation>
         <Operation Id="Smp.IComponent.GetField" Name="GetField" Visibility="public">
            <Description>Get the field of given name.
</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetField.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComponent.GetField.return" Name="return" Direction="return">
               <Description>Instance of field for given full name.</Description>
               <Type xlink:title="IField" xlink:href="#Smp.IField"/>
            </Parameter>
            <Parameter Id="Smp.IComponent.GetField.fullName" Name="fullName">
               <Description>Fully qualified field name (relative to the component).</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
            <RaisedException xlink:title="InvalidFieldName" xlink:href="#Smp.InvalidFieldName"/>
         </Operation>
         <Operation Id="Smp.IComponent.GetFields" Name="GetFields" Visibility="public">
            <Description>Returns a collection of all fields of the component.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetFields.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComponent.GetFields.return" Name="return" Direction="return">
               <Description>Collection of the fields (immediate children) of the component.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetFields.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="FieldCollection" xlink:href="#Smp.FieldCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IComponent.GetUuid" Name="GetUuid" Visibility="public">
            <Description>Get Universally Unique Identifier of Component Type.

</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetUuid.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComponent.GetUuid.return" Name="return" Direction="return">
               <Description>Universally Unique Identifier of Component.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetUuid.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IComponent.GetUuid.return.ByReference"
                         Name="ByReference">
                  <Type xlink:title="ByReference" xlink:href="#Smp.Attributes.ByReference"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="Uuid" xlink:href="#Smp.Uuid"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidObjectName" Name="InvalidObjectName"
            Visibility="public"
            Uuid="d539a38f-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to set an object&apos;s name to an invalid name. Names
&lt;ul&gt;
&lt;li&gt;must not be empty,&lt;/li&gt;
&lt;li&gt;must start with a letter, and&lt;/li&gt;
&lt;li&gt;must only contain letters, digits, the underscore (&quot;_&quot;) and brackets (&quot;[&quot; and &quot;]&quot;).&lt;/li&gt;
&lt;/ul&gt;
</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidObjectName.GetInvalidName" Name="GetInvalidName"
                    Visibility="public">
            <Description>Get the invalid object name passed to the constructor of the object.</Description>
            <Parameter Id="Smp.InvalidObjectName.GetInvalidName.return" Name="return"
                       Direction="return">
               <Description>Invalid object name passed to the constructor of the object.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.PrimitiveTypeKind"
            Name="PrimitiveTypeKind"
            Visibility="public"
            Uuid="d55b0e31-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This is an enumeration of the available primitive types.</Description>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_None" Name="PTK_None" Value="0">
            <Description>No type, e.g. for void.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Char8" Name="PTK_Char8" Value="1">
            <Description>8 bit character type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Bool" Name="PTK_Bool" Value="2">
            <Description>Boolean with true and false.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Int8" Name="PTK_Int8" Value="3">
            <Description>8 bit signed integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_UInt8" Name="PTK_UInt8" Value="4">
            <Description>8 bit unsigned integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Int16" Name="PTK_Int16" Value="5">
            <Description>16 bit signed integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_UInt16" Name="PTK_UInt16" Value="6">
            <Description>16 bit unsigned integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Int32" Name="PTK_Int32" Value="7">
            <Description>32 bit signed integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_UInt32" Name="PTK_UInt32" Value="8">
            <Description>32 bit unsigned integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Int64" Name="PTK_Int64" Value="9">
            <Description>64 bit signed integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_UInt64" Name="PTK_UInt64" Value="10">
            <Description>64 bit unsigned integer type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Float32" Name="PTK_Float32" Value="11">
            <Description>32 bit single-precision floating-point type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Float64" Name="PTK_Float64" Value="12">
            <Description>64 bit double-precision floating-point type.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_Duration" Name="PTK_Duration" Value="13">
            <Description>Duration in nanoseconds.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_DateTime" Name="PTK_DateTime" Value="14">
            <Description>Absolute time in nanoseconds.</Description>
         </Literal>
         <Literal Id="Smp.PrimitiveTypeKind.PTK_String8" Name="PTK_String8" Value="15">
            <Description>8 bit character string.</Description>
         </Literal>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ComponentCollection"
            Name="ComponentCollection"
            Visibility="public"
            Uuid="d55b0e81-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A component collection is an ordered collection of components, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IComponent&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.FailureCollection" Name="FailureCollection"
            Visibility="public"
            Uuid="d572db3a-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A failure collection is an ordered collection of failures, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IFailure&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.FieldCollection" Name="FieldCollection"
            Visibility="public"
            Uuid="9b7c7cbe-cc52-11e6-a1c3-13e36fcced83">
         <Description>A field collection is an ordered collection of fields, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IField&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.OperationCollection"
            Name="OperationCollection"
            Visibility="public"
            Uuid="8a44a5be-cc2d-11e9-abb3-9f6a2356f7e2">
         <Description>A field collection is an ordered collection of operations, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IOperation&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ParameterCollection"
            Name="ParameterCollection"
            Visibility="public"
            Uuid="0dedc8b4-cc39-11e9-abb3-9f6a2356f7e2">
         <Description>A parameter collection is an ordered collection of parameters, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IParameter&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.PropertyCollection"
            Name="PropertyCollection"
            Visibility="public"
            Uuid="8a44a5b9-cc2d-11e9-abb3-9f6a2356f7e2">
         <Description>A field collection is an ordered collection of properties, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IProperty&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Types:Enumeration" Id="Smp.ComponentStateKind"
            Name="ComponentStateKind"
            Visibility="public"
            Uuid="d55d57c7-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This is an enumeration of the available states of a component. Each component is always in one of these four component states.</Description>
         <Literal Id="Smp.ComponentStateKind.CSK_Created" Name="CSK_Created" Value="0">
            <Description>The Created state is the initial state of a component. Component creation is done by an external mechanism, e.g. by factories. 
This state is entered automatically after the component has been created. 
This state is left via the Publish() state transition.</Description>
         </Literal>
         <Literal Id="Smp.ComponentStateKind.CSK_Publishing" Name="CSK_Publishing" Value="1">
            <Description>In Publishing state, the component is allowed to publish features. This includes publication of fields, operations and properties. In addition, the component is allowed to create other components. 
This state is entered via the Publish() state transition. 
This state is left via the Configure() state transition.</Description>
         </Literal>
         <Literal Id="Smp.ComponentStateKind.CSK_Configured" Name="CSK_Configured" Value="2">
            <Description>In Configured state, the component has been fully configured. This configuration may be done by external components, or internally by the component itself, e.g. by reading data from an external source. 
This state is entered via the Configure() state transition. 
This state is left via the Connect() state transition.
</Description>
         </Literal>
         <Literal Id="Smp.ComponentStateKind.CSK_Connected" Name="CSK_Connected" Value="3">
            <Description>In Connected state, the component is connected to the simulator. In this state, neither publication nor creation of other components is allowed anymore. Configuration performed via loading of SMDL configuration file and/or calling of initialisation entry point are performed in this state.
This state is entered via the Connect() state transition.
This state is left via the Disconnect() state transition or on simulation termination.</Description>
         </Literal>
         <Literal Id="Smp.ComponentStateKind.CSK_Disconnected" Name="CSK_Disconnected" Value="4">
            <Description>In Disconnected state, the component is disconnected from the simulator, and all references to it are deleted, so that it can be deleted.
This state is entered via the Disconnect() state transition.
This is the final state of a component, and only left on deletion.</Description>
         </Literal>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IModel" Name="IModel"
            Visibility="public"
            Uuid="d55d57da-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a model.</Description>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.DuplicateName" Name="DuplicateName"
            Visibility="public"
            Uuid="d56baf6e-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to add an object to a collection of objects, which have to have unique names, but another object with the same name does exist already in this collection. This would lead to duplicate names.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.DuplicateName.GetDuplicateName" Name="GetDuplicateName"
                    Visibility="public">
            <Description>Get the name that already exists in the collection.</Description>
            <Parameter Id="Smp.DuplicateName.GetDuplicateName.return" Name="return" Direction="return">
               <Description>Name that already exists in the collection.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.AnySimpleArray" Name="AnySimpleArray"
            Visibility="public"
            Uuid="d55b0e53-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Array of AnySimple values.</Description>
         <Platform Name="cpp" Type="AnySimple*" Location="Smp/AnySimple.h"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ModelCollection" Name="ModelCollection"
            Visibility="public"
            Uuid="d55d57fd-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A model collection is an ordered collection of models, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IModel&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IService" Name="IService"
            Visibility="public"
            Uuid="d55d57d1-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a service.</Description>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidAnyType" Name="InvalidAnyType"
            Visibility="public"
            Uuid="d56baf73-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to use an AnySimple argument of wrong type.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidAnyType.GetInvalidType" Name="GetInvalidType"
                    Visibility="public">
            <Description>Get the type that is not valid.</Description>
            <Parameter Id="Smp.InvalidAnyType.GetInvalidType.return" Name="return" Direction="return">
               <Description>Type that is not valid.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.InvalidAnyType.GetExpectedType" Name="GetExpectedType"
                    Visibility="public">
            <Description>Get the type that was expected.</Description>
            <Parameter Id="Smp.InvalidAnyType.GetExpectedType.return" Name="return" Direction="return">
               <Description>Type that was expected.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ServiceCollection" Name="ServiceCollection"
            Visibility="public"
            Uuid="d55d57d5-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A service collection is an ordered collection of services, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IService&gt;" Namespace="Smp"
                   Location="ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IAggregate" Name="IAggregate"
            Visibility="public"
            Uuid="d55fc83f-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for an aggregate component.</Description>
         <Operation Id="Smp.IAggregate.GetReferences" Name="GetReferences" Visibility="public">
            <Description>Query for the collection of all references of the aggregate component. </Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IAggregate.GetReferences.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IAggregate.GetReferences.return" Name="return" Direction="return">
               <Description>Collection of references.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IAggregate.GetReferences.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IAggregate.GetReferences.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="ReferenceCollection" xlink:href="#Smp.ReferenceCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IAggregate.GetReference" Name="GetReference" Visibility="public">
            <Description>Query for a reference of this aggregate component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IAggregate.GetReference.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IAggregate.GetReference.return" Name="return" Direction="return">
               <Description>Reference queried for by name, or null if no reference with this name exists.</Description>
               <Type xlink:title="IReference" xlink:href="#Smp.IReference"/>
            </Parameter>
            <Parameter Id="Smp.IAggregate.GetReference.name" Name="name">
               <Description>Reference name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidObjectType" Name="InvalidObjectType"
            Visibility="public"
            Uuid="d56baf7b-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to pass an object of wrong type.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidObjectType.GetInvalidObject" Name="GetInvalidObject"
                    Visibility="public">
            <Description>Get the object that is not of valid type.</Description>
            <Parameter Id="Smp.InvalidObjectType.GetInvalidObject.return" Name="return"
                       Direction="return">
               <Description>Object that is not of valid type.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.InvalidObjectType.GetInvalidObject.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEventConsumer" Name="IEventConsumer"
            Visibility="public"
            Uuid="d53e5df4-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an event consumer.</Description>
         <Operation Id="Smp.IEventConsumer.GetEventSinks" Name="GetEventSinks" Visibility="public">
            <Description>Query for the collection of all event sinks of the component.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEventConsumer.GetEventSinks.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEventConsumer.GetEventSinks.return" Name="return" Direction="return">
               <Description>Collection of event sinks.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IEventConsumer.GetEventSinks.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IEventConsumer.GetEventSinks.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="EventSinkCollection" xlink:href="#Smp.EventSinkCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IEventConsumer.GetEventSink" Name="GetEventSink" Visibility="public">
            <Description>Query for an event sink of this component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEventConsumer.GetEventSink.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEventConsumer.GetEventSink.return" Name="return" Direction="return">
               <Description>Event sink with the given name, or null if no event sink with the given name could be found.</Description>
               <Type xlink:title="IEventSink" xlink:href="#Smp.IEventSink"/>
            </Parameter>
            <Parameter Id="Smp.IEventConsumer.GetEventSink.name" Name="name">
               <Description>Event sink name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IReference" Name="IReference"
            Visibility="public"
            Uuid="d55fc829-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a reference.</Description>
         <Operation Id="Smp.IReference.GetComponents" Name="GetComponents" Visibility="public">
            <Description>Query for the collection of all referenced components.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetComponents.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IReference.GetComponents.return" Name="return" Direction="return">
               <Description>Collection of referenced components.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetComponents.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetComponents.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="ComponentCollection" xlink:href="#Smp.ComponentCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IReference.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Query for a referenced component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetComponent.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IReference.GetComponent.return" Name="return" Direction="return">
               <Description>Referenced component with the given name, or null if no referenced component with the given name could be found.
If multiple components matching the given name argument are found, it returns one of the references.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <Parameter Id="Smp.IReference.GetComponent.name" Name="name">
               <Description>Component name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IReference.AddComponent" Name="AddComponent" Visibility="public">
            <Description>Add a referenced component.</Description>
            <Parameter Id="Smp.IReference.AddComponent.component" Name="component" Direction="inout">
               <Description>New referenced component.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <RaisedException xlink:title="ReferenceFull" xlink:href="#Smp.ReferenceFull"/>
            <RaisedException xlink:title="InvalidObjectType" xlink:href="#Smp.InvalidObjectType"/>
         </Operation>
         <Operation Id="Smp.IReference.RemoveComponent" Name="RemoveComponent" Visibility="public">
            <Description>Remove a referenced component.</Description>
            <Parameter Id="Smp.IReference.RemoveComponent.component" Name="component"
                       Direction="inout">
               <Description>Referenced component to remove.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <RaisedException xlink:title="NotReferenced" xlink:href="#Smp.NotReferenced"/>
            <RaisedException xlink:title="CannotRemove" xlink:href="#Smp.CannotRemove"/>
         </Operation>
         <Operation Id="Smp.IReference.GetCount" Name="GetCount" Visibility="public">
            <Description>Query for the number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetCount.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IReference.GetCount.return" Name="return" Direction="return">
               <Description>Current number of components in the collection.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IReference.GetUpper" Name="GetUpper" Visibility="public">
            <Description>Query the maximum number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetUpper.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IReference.GetUpper.return" Name="return" Direction="return">
               <Description>Maximum number of components in the collection (-1 = unlimited).</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IReference.GetLower" Name="GetLower" Visibility="public">
            <Description>Query the minimum number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IReference.GetLower.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IReference.GetLower.return" Name="return" Direction="return">
               <Description>Minimum number of components in the collection or 0 when no minimum number has been defined.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.ContainerFull" Name="ContainerFull"
            Visibility="public"
            Uuid="d53c13c4-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to add a component to a container that is full, i.e. where the Count has reached the Upper limit.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.ContainerFull.GetContainerName" Name="GetContainerName"
                    Visibility="public">
            <Description>Get the name of the full container.</Description>
            <Parameter Id="Smp.ContainerFull.GetContainerName.return" Name="return" Direction="return">
               <Description>Name of the full container.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.ContainerFull.GetContainerSize" Name="GetContainerSize"
                    Visibility="public">
            <Description>Get the size of the full container.</Description>
            <Parameter Id="Smp.ContainerFull.GetContainerSize.return" Name="return" Direction="return">
               <Description>Size of the full container.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ReferenceCollection"
            Name="ReferenceCollection"
            Visibility="public"
            Uuid="d55fc83a-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A reference collection is an ordered collection of references, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IReference&gt;" Namespace="Smp"
                   Location="ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IComposite" Name="IComposite"
            Visibility="public"
            Uuid="d55d5818-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a composite.</Description>
         <Operation Id="Smp.IComposite.GetContainers" Name="GetContainers" Visibility="public">
            <Description>Query for the collection of all containers of the composite.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComposite.GetContainers.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComposite.GetContainers.return" Name="return" Direction="return">
               <Description>Collection of containers.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IComposite.GetContainers.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IComposite.GetContainers.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="ContainerCollection" xlink:href="#Smp.ContainerCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IComposite.GetContainer" Name="GetContainer" Visibility="public">
            <Description>Query for a container of this composite by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IComposite.GetContainer.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IComposite.GetContainer.return" Name="return" Direction="return">
               <Description>Container queried for by name, or null if no container with this name exists.</Description>
               <Type xlink:title="IContainer" xlink:href="#Smp.IContainer"/>
            </Parameter>
            <Parameter Id="Smp.IComposite.GetContainer.name" Name="name">
               <Description>Container name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEventProvider" Name="IEventProvider"
            Visibility="public"
            Uuid="d53e5de3-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an event provider.</Description>
         <Operation Id="Smp.IEventProvider.GetEventSources" Name="GetEventSources"
                    Visibility="public">
            <Description>Query for the collection of all event sources of the component.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEventProvider.GetEventSources.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEventProvider.GetEventSources.return" Name="return" Direction="return">
               <Description>Collection of event sources.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IEventProvider.GetEventSources.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IEventProvider.GetEventSources.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="EventSourceCollection" xlink:href="#Smp.EventSourceCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IEventProvider.GetEventSource" Name="GetEventSource"
                    Visibility="public">
            <Description>Query for an event source of this component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEventProvider.GetEventSource.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEventProvider.GetEventSource.return" Name="return" Direction="return">
               <Description>Event source with the given name or null if no event source with the given name could be found.</Description>
               <Type xlink:title="IEventSource" xlink:href="#Smp.IEventSource"/>
            </Parameter>
            <Parameter Id="Smp.IEventProvider.GetEventSource.name" Name="name">
               <Description>Event source name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
      </Type>
      <Type xsi:type="Types:Exception" Id="Smp.InvalidFieldValue" Name="InvalidFieldValue"
            Visibility="public"
            Uuid="d579e02c-e618-11dc-ab64-bf8df6d7b83a">
         <Description>This exception is raised when trying to assign an illegal value to a field.</Description>
         <Base xlink:title="Exception" xlink:href="#Smp.Exception"/>
         <Operation Id="Smp.InvalidFieldValue.GetInvalidFieldValue" Name="GetInvalidFieldValue"
                    Visibility="public">
            <Description>Get the value that was passed as new field value.</Description>
            <Parameter Id="Smp.InvalidFieldValue.GetInvalidFieldValue.return" Name="return"
                       Direction="return">
               <Description>Value that was passed as new field value.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IContainer" Name="IContainer"
            Visibility="public"
            Uuid="d55d5802-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface for a container.</Description>
         <Operation Id="Smp.IContainer.GetComponents" Name="GetComponents" Visibility="public">
            <Description>Query for the collection of all components in the container. </Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetComponents.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IContainer.GetComponents.return" Name="return" Direction="return">
               <Description>Collection of contained components.</Description>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetComponents.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetComponents.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="ComponentCollection" xlink:href="#Smp.ComponentCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IContainer.GetComponent" Name="GetComponent" Visibility="public">
            <Description>Query for a component contained in the container by name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetComponent.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IContainer.GetComponent.return" Name="return" Direction="return">
               <Description>Child component, or null if no child component with the given name exists.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <Parameter Id="Smp.IContainer.GetComponent.name" Name="name">
               <Description>Component name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IContainer.AddComponent" Name="AddComponent" Visibility="public">
            <Description>Add a contained component to the container.</Description>
            <Parameter Id="Smp.IContainer.AddComponent.component" Name="component" Direction="inout">
               <Description>New contained component.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <RaisedException xlink:title="ContainerFull" xlink:href="#Smp.ContainerFull"/>
            <RaisedException xlink:title="DuplicateName" xlink:href="#Smp.DuplicateName"/>
            <RaisedException xlink:title="InvalidObjectType" xlink:href="#Smp.InvalidObjectType"/>
         </Operation>
         <Operation Id="Smp.IContainer.DeleteComponent" Name="DeleteComponent" Visibility="public">
            <Description>Delete a contained component from the container, and from memory.</Description>
            <Parameter Id="Smp.IContainer.DeleteComponent.component" Name="component"
                       Direction="inout">
               <Description>Component to delete from container, and from memory.</Description>
               <Type xlink:title="IComponent" xlink:href="#Smp.IComponent"/>
            </Parameter>
            <RaisedException xlink:title="CannotDelete" xlink:href="#Smp.CannotDelete"/>
            <RaisedException xlink:title="NotContained" xlink:href="#Smp.NotContained"/>
         </Operation>
         <Operation Id="Smp.IContainer.GetCount" Name="GetCount" Visibility="public">
            <Description>Query for the number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetCount.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IContainer.GetCount.return" Name="return" Direction="return">
               <Description>Current number of components in the collection.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IContainer.GetUpper" Name="GetUpper" Visibility="public">
            <Description>Query the maximum number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetUpper.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IContainer.GetUpper.return" Name="return" Direction="return">
               <Description>Maximum number of components in the collection (-1 = unlimited).</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IContainer.GetLower" Name="GetLower" Visibility="public">
            <Description>Query the minimum number of components in the collection.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IContainer.GetLower.Const" Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IContainer.GetLower.return" Name="return" Direction="return">
               <Description>Minimum number of components in the collection or 0 when no minimum number has been defined.</Description>
               <Type xlink:title="Int64" xlink:href="#Smp.Int64"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.ContainerCollection"
            Name="ContainerCollection"
            Visibility="public"
            Uuid="d55d5813-e618-11dc-ab64-bf8df6d7b83a">
         <Description>A container collection is an ordered collection of containers, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IContainer&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEntryPointPublisher"
            Name="IEntryPointPublisher"
            Visibility="public"
            Uuid="d53e5e05-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an entry point publisher.</Description>
         <Operation Id="Smp.IEntryPointPublisher.GetEntryPoints" Name="GetEntryPoints"
                    Visibility="public">
            <Description>Query for the collection of all entry points of the component.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEntryPointPublisher.GetEntryPoints.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEntryPointPublisher.GetEntryPoints.return" Name="return"
                       Direction="return">
               <Description>Collection of entry points.</Description>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IEntryPointPublisher.GetEntryPoints.return.Const"
                         Name="Const">
                  <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Metadata xsi:type="Types:Attribute"
                         Id="Smp.IEntryPointPublisher.GetEntryPoints.return.ByPointer"
                         Name="ByPointer">
                  <Type xlink:title="ByPointer" xlink:href="#Smp.Attributes.ByPointer"/>
                  <Value xsi:type="Types:BoolValue" Value="true"/>
               </Metadata>
               <Type xlink:title="EntryPointCollection" xlink:href="#Smp.EntryPointCollection"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IEntryPointPublisher.GetEntryPoint" Name="GetEntryPoint"
                    Visibility="public">
            <Description>Query for an entry point of this component by its name.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEntryPointPublisher.GetEntryPoint.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEntryPointPublisher.GetEntryPoint.return" Name="return"
                       Direction="return">
               <Description>Entry point with given name, or null if no entry point with given name could be found.</Description>
               <Type xlink:title="IEntryPoint" xlink:href="#Smp.IEntryPoint"/>
            </Parameter>
            <Parameter Id="Smp.IEntryPointPublisher.GetEntryPoint.name" Name="name">
               <Description>Entry point name.</Description>
               <Type xlink:title="String8" xlink:href="#Smp.String8"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Catalogue:Interface" Id="Smp.IEventSink" Name="IEventSink"
            Visibility="public"
            Uuid="d55d5787-e618-11dc-ab64-bf8df6d7b83a">
         <Description>Interface of an event sink that can be subscribed to an event source (IEventSource).</Description>
         <Operation Id="Smp.IEventSink.GetEventArgType" Name="GetEventArgType" Visibility="public">
            <Description>Get the primitive type kind of the event argument.
Use PTK_None for an event without an argument.</Description>
            <Metadata xsi:type="Types:Attribute" Id="Smp.IEventSink.GetEventArgType.Const"
                      Name="Const">
               <Type xlink:title="Const" xlink:href="#Smp.Attributes.Const"/>
               <Value xsi:type="Types:BoolValue" Value="true"/>
            </Metadata>
            <Parameter Id="Smp.IEventSink.GetEventArgType.return" Name="return" Direction="return">
               <Description>Primitive type kind of the event argument, or PTK_None for none.</Description>
               <Type xlink:title="PrimitiveTypeKind" xlink:href="#Smp.PrimitiveTypeKind"/>
            </Parameter>
         </Operation>
         <Operation Id="Smp.IEventSink.Notify" Name="Notify" Visibility="public">
            <Description>This event handler method is called when an event is emitted.</Description>
            <Parameter Id="Smp.IEventSink.Notify.sender" Name="sender" Direction="inout">
               <Description>Object emitting the event.</Description>
               <Type xlink:title="IObject" xlink:href="#Smp.IObject"/>
            </Parameter>
            <Parameter Id="Smp.IEventSink.Notify.arg" Name="arg">
               <Description>Event argument with context data for event notification.
The type of the event argument (PTK_None or one of the existing Primitive Type Kinds) depends on the type of the event sink.</Description>
               <Type xlink:title="AnySimple" xlink:href="#Smp.AnySimple"/>
            </Parameter>
         </Operation>
         <Base xlink:title="IObject" xlink:href="#Smp.IObject"/>
      </Type>
      <Type xsi:type="Types:NativeType" Id="Smp.EventSinkCollection"
            Name="EventSinkCollection"
            Visibility="public"
            Uuid="d55d5797-e618-11dc-ab64-bf8df6d7b83a">
         <Description>An event sink collection is an ordered collection of event sinks, which allows iterating all members.</Description>
         <Platform Name="cpp" Type="ICollection&lt;IEventSink&gt;" Namespace="Smp"
                   Location="Smp/ICollection.h"/>
      </Type>
   </Namespace>
</Catalogue:Catalogue>