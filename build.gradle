buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.xtext:xtext-gradle-plugin:4.0.0'
        classpath 'com.github.node-gradle:gradle-node-plugin:7.0.2'
        //classpath 'net.researchgate:gradle-release:3.0.2'
    }
}

apply plugin: 'com.github.node-gradle.node'
//apply plugin: 'net.researchgate.release'

// Configuration for Xtext projects
configure(subprojects.findAll { it.name.startsWith('org.eclipse.xsmp') }) {
    ext.xtextVersion = '2.34.0'
    repositories {
        mavenCentral()
    }
    
    apply plugin: 'java-library'
    dependencies {
        api platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
    }
    apply plugin: 'org.xtext.xtend'
    apply from: "${rootDir}/gradle/source-layout.gradle"
    apply plugin: 'eclipse'
    //apply plugin: 'idea'
    
    group = 'org.eclipse.xsmp'
    
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    
    
    configurations.all {
        exclude group: 'asm'
    }

}

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
    ext.destPath = "$rootProject.projectDir/node_modules/@vscode/vsce" 
    outputs.dir(destPath)
    group 'Node'
    description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
    args = [ 'install', '@vscode/vsce' ]
}

// Configuration for vscode projects
configure(subprojects.findAll { it.name.equals('vscode-extension') }) {

    apply plugin: 'com.github.node-gradle.node'

    def inputFiles = fileTree(
        dir: projectDir, 
        excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
    )

    npmInstall {
        inputs.files(inputFiles)
        outputs.dir('out')
    }

    task vscodeExtension(dependsOn: [npmInstall, npmInstallVsce], type: NodeTask) {
        ext.destDir = new File(buildDir, 'vscode')
        ext.archiveName = "xsmp-modeler-${version}.vsix"
        ext.destPath = "$destDir/$archiveName"
        inputs.with {
            files inputFiles
            dir npmInstallVsce.destPath
        }
        outputs.dir destDir
        doFirst {
            destDir.mkdirs()
        }
        script = file("$npmInstallVsce.destPath/vsce")
        args = [ 'package', '--out', destPath ]
        execOverrides {
            workingDir = projectDir
        }
    }

    task clean {
        doLast {
            delete vscodeExtension.destDir
            delete 'out' // output of npmInstall - don't want to delete node_modules
        }
        
    }

    task updateVersion(type: NpmTask, dependsOn: npmSetup) {
        group 'Node'
        description 'Update VS Code extension version'
        args = [ 'version', "${version}", '--allow-same-version' ]
    }
}

/*
release {
    tagTemplate = 'v${version}'
    preTagCommitMessage = '[release] pre tag commit: '
    tagCommitMessage = '[release] creating tag: '
    newVersionCommitMessage = '[release] new version commit: '
    failOnSnapshotDependencies = false
}
*/